//This is the first crewed flight mission, available immediately. It is intended to represent the testing of early turbine aircraft.
//It should be accomplishable with start-node technology, using a fairly simple fixed-wing turbine aircraft.
CONTRACT_TYPE
{
	name = CrewedFlightLow
	group = X-Planes

	title = X-Planes (Low)

	description = Design, build and fly a crewed aircraft (not a rocket) to maintain @VesselGroup/ReachAlt/minAltitude meters altitude then return home safely.&br;The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays</b>
	genericDescription = Design, build and fly a crewed aircraft (not a rocket) to maintain a specific altitude then return home safely.

	synopsis = Fly to @VesselGroup/ReachAlt/minAltitude m.

	completedMessage = Congratulations on a successful flight!

	deadline = 365 * RP1DeadlineMult()  // 1 year
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1

	targetBody = HomeWorld()

	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial

	// reward block
	advanceFunds = Round((250.0 + @VesselGroup/ReachAlt/minAltitude * 0.1) * @RP0:globalHardContractMultiplier * @rewardFactor, 100)
	rewardFunds = @advanceFunds
	failureFunds = @advanceFunds * 0.5
	rewardReputation = 0.5
	failureReputation = 0.5

	DATA
	{
		type = int
		antiGrindCompletion = $XPL_Completion == 0 ? (UniversalTime() - @expectedDays * 86400) : $XPL_Completion
	}

	DATA
	{
		type = float
		expectedDays = 120

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 3 - 0.05, 1), 2) / 1.5607
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	REQUIREMENT
	{
		name = All
		type = All

		REQUIREMENT
		{
			name = NotCompleteFirstCrewedSpaceFlight
			type = CompleteContract
			contractType = first_OrbitCrewed // Reach Orbit
			invertRequirement = true
		}
		REQUIREMENT
		{
			name = NotBrokeSoundBarrier
			type = CompleteContract
			contractType = BreakSoundBarrier // Sound Barrier Broken
			invertRequirement = true
		}
		REQUIREMENT
		{
			name = hadFirstFlight
			type = CompleteContract
			contractType = first_FirstFlight // Have Launched Already
		}
		REQUIREMENT
		{
			name = YesPlanes
			type = Expression
			expression = RP1YesPlanes
		}
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			XPL_Completion = ($XPL_Completion + 0) == 0 ? (UniversalTime() - 120 * 86400) : ($XPL_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			XPL_Completion = UniversalTime()
		}
	}

	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Maintain between @ReachAlt/minAltitude and @ReachAlt/maxAltitude m with a crewed aircraft.
		define = lowAirplane
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 1
			maxCrew = 99
			title = Have at least 1 crewmember on board
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			title = Hold between @minAltitude and @maxAltitude meters.
			minAltitude = Round(3000 + Random(0, 3000), 25)
			maxAltitude = @minAltitude + 1000

			title = Hold between @minAltitude and @maxAltitude meters.

			disableOnStateChange = true

			PARAMETER
			{
				name = Duration
				type = Duration
				duration = 3m
				preWaitText = Reach specified altitude.
				waitingText = Completing Flight
				completionText = Flight completed, you are cleared to land.
			}
		}
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Home Safely
			hideChildren = true
			completeInSequence = true
		}
	}
}
