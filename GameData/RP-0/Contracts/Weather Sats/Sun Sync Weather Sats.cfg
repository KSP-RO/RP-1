CONTRACT_TYPE
{
	name = SunSyncWeather
	title = Sun Synchronous Weather Satellite
	group = WeatherSats


	description = Polar orbiting weather satellites are launched in sun-synchronous orbits that allow them to observe the same area on Earth twice a day with the same general lighting. The images they can return are of much higher resolution than geostationary satellites because their orbit is much lower. Launch a sun-synchronous weather satellite into the proper orbit. Remember that Sun Synchronous orbits are slightly retrograde.&br;&br;<b><color=red>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b>&br;&br;<b>Number of Contracts Completed: $SunSyncWeather_Count</b>
	genericDescription = Put a satellite into the requested orbit.

	synopsis = Launch a sun-synchronous weather satellite

	completedMessage = Success! The quality of the images returned are great!

	sortKey = 504

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 0
	maxExpiry = 0
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = 365  // 1 year

	targetBody = HomeWorld()



	prestige = Significant   // 1.25x
	advanceFunds = ((7000 * Pow(1 + ((@SunSyncWeather/HasWeatherSatPayload/minQuantity * 2) / 1000), 1.25)) / 2) * @RP0:globalHardContractMultiplier
	rewardScience = 0
	rewardReputation = 10
	rewardFunds = (7000 * Pow(1 + ((@SunSyncWeather/HasWeatherSatPayload/minQuantity * 2) / 1000), 1.25)) * @RP0:globalHardContractMultiplier
	failureReputation = 10
	failureFunds = @advanceFunds * 0.5

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SecondGenWeather
		minCount = 3
		title = Complete @contractType Contract at least @minCount times
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstSunSyncSat
	}
	
	BEHAVIOUR
	{
		name = RandomSunSyncOrbit
		type = OrbitGenerator

		FIXED_ORBIT
		{
			ORBIT
			{
			SMA = Round(Random(7000000,7500000))
			ECC = Random(0.0011, 0.0016)
			INC = Random(98.7,98.97)
			LPE = Random(0,360)
			LAN = Random(0,360)
			MNA = 0
			EPH = 0
			REF = 1
			}
		}
	}
	
	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		
		CONTRACT_COMPLETED_SUCCESS
        {
            SunSyncWeather_Count = $SunSyncWeather_Count + 1
        }
	}
	
	// ************ PARAMETERS ************

	PARAMETER
	{
		name = SunSyncWeather
		type = VesselParameterGroup
		define = SunSyncWeatherSatellite
		dissassociateVesselsOnContractCompletion = true
		title = Sun Synchronous Weather Satellite

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
		{
			name = HasWeatherSatPayload
			type = HasResource
			resource = WeatherSatPayload
			minQuantity = Round(Random(250,500),1)
			title = Have a WeatherSatPayload of at least @minQuantity units on the craft
		}
		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit
			displayNotes = true
			index = 0
			deviationWindow = 5.0
			
			PARAMETER
			{
				name = Duration
				type = Duration

				duration = 2m

				preWaitText = Check for Stable Orbit
				waitingText = Checking for Stable Orbit
				completionText = Stable Orbit: Confirmed
			}
		}
	}
  BEHAVIOUR
  {
    name = TransferVessel
    type = DestroyVessel
    onState = CONTRACT_SUCCESS
    vessel = SunSyncWeatherSatellite
  }
  BEHAVIOUR
  {
	name = VesselDestroyed
	type = DialogBox
	DIALOG_BOX
	{
	  title = Vessel Ownership Transferred
	  condition = CONTRACT_SUCCESS
	  position = CENTER
	  width = 0.5
	  TEXT
	  {
		text = The contract has been completed successfully and the satellite has been transferred back to the customer.
	  }
	}
  }
}
