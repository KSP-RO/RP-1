CONTRACT_TYPE
{
	name = GEORepeatComSats
	title = Geostationary Commercial Communications Satellite
	group = GEOCommNetwork
	agent = Satellites

	description = We have a customer requesting a new Communications Satellite. Design a satellite within their specs and launch into an orbit with the proper orbital parameters as outlined in the contract.&br;&br;This contract can be completed as many times as you would like.&br;&br;<b><color=red>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b><br>Number of Contracts Completed: @index / unlimited</b>
	genericDescription = Put a satellite into the requested orbit.

	synopsis = Launch a new Commercial Communications Satellite

	completedMessage = Congratulations! The customer has reported the satellite is in the proper orbit.

	sortKey = 900

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = 365 * RP1DeadlineMult()  // 1 year

	targetBody = HomeWorld()

	// ************ REWARDS ************
	prestige = Trivial       // 1.0x
	advanceFunds = 0
	rewardScience = 0
	rewardFunds = 0
	failureFunds = 0
	rewardReputation = 1	// was
	failureReputation = 1	// was



	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = ProgramActive
		type = ProgramActive
		program = GEOCommNetwork
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = EarlyComSat
		minCount = 2
		title = Complete 'Commercial Communications Satellite (Early)' contract at least @minCount times
	}

	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = MolniyaRepeatComSats
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = TundraRepeatComSats
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = EarlyComSat
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = ComTestSat
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = GEOWeather
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = SecondGenWeather
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = SunSyncWeather
		invertRequirement = true
	}

	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator

		RANDOM_ORBIT
		{
			type = STATIONARY
		}
	}

	DATA
	{
		type = int
		index = $GEORepeatComSats_Count + 0
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			RepeatSat_Completion = ($RepeatSat_Completion + 0) == 0 ? (UniversalTime() - 60 * 86400) : ($RepeatSat_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			GEORepeatComSats_Count = $GEORepeatComSats_Count + 1
			RepeatSat_Completion = UniversalTime()
		}
	}

	DATA
	{
		type = float
		payload = Round(Max(Random(RP1CommsPayload() / 2, RP1CommsPayload()), 300), 25)
	}

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = AdvComSat
		type = VesselParameterGroup
		define = AdvComSatellite
		dissassociateVesselsOnContractCompletion = true
		title = Commercial Communications Satellite

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
		{
			name = HasComSatPayload
			type = HasResource
			resource = ComSatPayload
			minQuantity = @/payload-0.01
			title = Have a ComSatPayload of at least @/payload units on the craft
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit
			displayNotes = true
			index = 0
			deviationWindow = 4

			PARAMETER
			{
				name = Duration
				type = Duration

				duration = 2m

				preWaitText = Check for Stable Orbit
				waitingText = Checking for Stable Orbit
				completionText = Stable Orbit: Confirmed
			}
		}
	}

	BEHAVIOUR
	{
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = AdvComSatellite
	}

	BEHAVIOUR
	{
		name = VesselDestroyed
		type = DialogBox
		DIALOG_BOX
		{
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5
			TEXT
			{
				text = The contract has been completed successfully and the satellite has been transferred back to the customer.
			}
		}
	}
}
