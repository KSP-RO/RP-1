CONTRACT_TYPE
{
	name = SoundingRocketHigh
	group = SoundingRocketContracts
	
	title = Sounding Rocket (High)
	
	description = Design, build and launch a sounding rocket to attain @/altHigh.Print() km.
	
	synopsis = Launch a sounding rocket to @/altHigh.Print() km.
	
	completedMessage = Congratulations on a successful launch! The rocket has reached @/altHigh.Print() km.
	
	minExpiry = 1.0
	maxExpiry = 30.0
	deadline = 90
	cancellable = true
	declinable = true
	autoAccept = false
	
	targetBody = HomeWorld()
	
	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial
	
	// reward block
	// 1500 to 2000
	advanceFunds = 1400.0 + @VesselGroup/ReachAlt/minAltitude*0.0001
	rewardFunds = @advanceFunds + 1000
	failureFunds = @advanceFunds
	
	weight = 20.0
	
	DATA
	{
		type = int
		altHigh = @/VesselGroup/ReachAlt/minAltitude / 1000
	}

	// Break this into two steps to work around ContractConfigurator#260
  	DATA
    {
        type = float
        soundingAltIndex = RP0_SoundingAltitudeIndex
    }

	REQUIREMENT
	{
		name = Any
		type = Any
		REQUIREMENT
		{
			name = CompleteFirstOrbit
			type = CompleteContract
			contractType = first_OrbitUncrewed
		}
		REQUIREMENT
		{
			//It would be nice if this were an AltitudeRecord requirement. But it can't be,
			//because AltitudeRecord stops tracking at the space boundry. So we track which
			//sounding rocket contract we've reached. 13 refers to the 300Km line.
			name = AltitudeRecord300k
			type = Expression
	        expression = @/soundingAltIndex > 13
		}
	}
	
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Reach @/altHigh.Print() km with a sounding rocket.
		define = soundingHighCraft
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			minAltitude = 1000000 + Round(Random(0, 5000000), 100000)
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}
	}
}
