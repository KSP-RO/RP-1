CONTRACT_TYPE
{
	name = SoundingIntermediate
	group = SuborbRocketResearch
	
	tag = exclude_SoundingRocket

	title = Altitude Sounding Rocket (Intermediate)

	description = <b>Program: Suborbital Research<br>Type: <color=blue>Optional</color></b><br><br>Design, build, and launch a sounding rocket with @/totalPayload.Print() units of payload to @/missionAltitude.Print() km. @RP0:soundingTankAdvice<br><br>The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @RP0:expectedDays_AltitudeSounding</b>

	genericDescription = Launch a certain amount of sounding payload to a specified altitude. This contract is repeatable and the requirements for payload and altitude will gradually increase.

	synopsis = Launch a sounding rocket with @/totalPayload.Print() units of payload to @/missionAltitude.Print() km.

	completedMessage = Congratulations on a successful launch! The rocket has delivered the payload.

	sortKey = 117

	deadline = 0
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1

	targetBody = HomeWorld()

	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial

	// ************ REWARDS ************
	prestige = Trivial       // 1.0x
	advanceFunds = 0
	rewardScience = 0
	rewardFunds = 0
	failureFunds = 0
	rewardReputation = Round(10 * @rewardFactor, 1)
	failureReputation = 0 // was @rewardReputation

	DATA
	{
		type = int
		antiGrindCompletion = $SRA_Completion == 0 ? (UniversalTime() - @RP0:expectedDays_AltitudeSounding * 86400) : $SRA_Completion
	}

	DATA
	{
		type = float
		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @RP0:expectedDays_AltitudeSounding * 3 - 0.05, 1), 2) / 1.5607
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	// The global modifiers for all sounding rockets are stored in the main Groups.cfg file in the root Contracts folder
	DATA
	{
		// We want to set this to lag 1 level behind the current difficulty level
		title = Sets the current difficulty level based on the completed mission increment
		type = int
		soundingDifficultyLevel = Min( $RP0_SoundingDifficulty + 0, @RP0:maxSoundingDifficultyLevels )
	}

	DATA
	{
		title = Generate the actual payload for this specific mission
		type = int
		totalPayload = @RP0:SRPayload
	}

	DATA
	{
		title = Generate the actual altitude for this specific mission
		type = int
		missionAltitude = @RP0:SRBaseAltitude + ( @soundingDifficultyLevel * @RP0:SRAltitudeIncrement )
		missionAltitudeMeters = @missionAltitude * 1000
	}

	// ************ REQUIREMENTS ************
	REQUIREMENT
	{
		name = ProgramActive
		type = ProgramActive
		program = SuborbRocketResearch
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = KarmanLine
	}

	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		tag = exclude_SoundingRocket
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		tag = exclude_SoundingDownrange
		invertRequirement = true
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			SRA_Completion = ($SRA_Completion + 0) == 0 ? (UniversalTime() - @RP0:expectedDays_AltitudeSounding * 86400) : ($SRA_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			SRA_Completion = UniversalTime()
		}
	}

	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup

		title = Reach @/missionAltitude.Print() km with @/totalPayload.Print() units of Sounding Payload.

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a new vessel
			hideChildren = true
		}

		PARAMETER
		{
			name = BuiltAtVAB
			type = VesselBuiltAt
			builtAt = VAB
		}

		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}

		PARAMETER
		{
			name = HasSoundingPayload
			type = HasResource
			resource = SoundingPayload
			minQuantity = @/totalPayload - 0.1
			title = Have a SoundingPayload of at least @/totalPayload.Print() units on the craft
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			minAltitude = @/missionAltitudeMeters
			completeInSequence = true
			title = Reach an altitude of at least @/missionAltitude.Print() km
		}
	}
}
