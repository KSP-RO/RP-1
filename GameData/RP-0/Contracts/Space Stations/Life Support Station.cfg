CONTRACT_TYPE:NEEDS[TACLifeSupport]
{
	name = LifeSupportStation
	title = Resupply the Life Support Resources on @/targetVessel1
	genericTitle = Resupply the Life Support Resources on your Space Station
	group = SpaceStations
	agent = Stations

	description = Our Life Support Resources are getting low on our station and we need to send a resupply mission. As of our check today, you are at less than 25%.&br;&br;This contract is only requiring you to bring enough Food, Water and Oxygen to re-fill your stations tanks. Don't forget to bring the other resources you may need for your generators.

	synopsis = Send a mission to resupply the Life Support Resources on @/targetVessel1

	completedMessage = Mission Success! You have resupplied @/targetVessel1 with enough Life Support for now. Be sure to monitor your stations to keep them in supply.

	sortKey = 1507

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 0
	maxExpiry = 0
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = 120  // 6 months

	targetBody = @/targetBody1

	prestige = Trivial       // 1.0x
	advanceFunds = (Round(Random(5000, 10000))) * @RP0:globalHardContractMultiplier
	rewardScience = 0
	rewardReputation = Round(Random(1,5))
	rewardFunds = (@/targetVessel1.CrewCount() >4 ? @/targetVessel1.CrewCount()*10000 : Random(40000, 60000.0)) * @RP0:globalHardContractMultiplier
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds * 0.5

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = first_spaceStation
	}

	DATA
	{
		type = Vessel
		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.FreeDockingPorts()>0 && (v.ResourceCapacity(Food) / v.ResourceQuantity(Food))>0.26 || (v.ResourceCapacity(Water) / v.ResourceQuantity(Water))>0.26 || (v.ResourceCapacity(Oxygen) / v.ResourceQuantity(Oxygen))>0.26).SelectUnique()
		title = Must have an open Docking Port and 25% or less of Life Support Supplies
	}
	DATA
	{
		type = int
		foodSpace = Round(@/targetVessel1.ResourceCapacity(Food) - @/targetVessel1.ResourceQuantity(Food))
		waterSpace = Round(@/targetVessel1.ResourceCapacity(Water) - @/targetVessel1.ResourceQuantity(Water))
		oxygenSpace = Round(@/targetVessel1.ResourceCapacity(Oxygen) - @/targetVessel1.ResourceQuantity(Oxygen))
		title = Get empty space for Life Support
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}

	PARAMETER
	{
		name = ResupplyLS
		type = VesselParameterGroup
		title = Increase the Life Support Resources on @/targetVessel1
		disableOnStateChange = true

		PARAMETER
		{
			name = AllResources
			type = All
			title = Have at least 1 Docking Port and bring at least @/foodSpace Food, @/waterSpace Water, and @/oxygenSpace Oxygen to refill your station.
			notes = This is the amount of Resources that would fill the station up

			PARAMETER
			{
				name = DockingPort
				type = PartValidation
				partModule = ModuleDockingNode
				minCount = 1
				title = Have at least 1 Docking Ports
				hideChildren = true
			}
			PARAMETER
			{
				name = LifeSupportResupply
				type = HasResource
				resource = Food
				minQuantity = @/foodSpace
				hideChildren = true
			}
			PARAMETER
			{
				name = LifeSupportResupply
				type = HasResource
				resource = Water
				minQuantity = @/waterSpace
				hideChildren = true
			}
			PARAMETER
			{
				name = LifeSupportResupply
				type = HasResource
				resource = Oxygen
				minQuantity = @/oxygenSpace
				hideChildren = true
			}
		}
	}

	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = true
	}
}
