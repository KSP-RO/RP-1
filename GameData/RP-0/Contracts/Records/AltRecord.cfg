CONTRACT_TYPE
{
  name = recordUncrewedAlt
  group = Records
	
  title = Uncrewed Altitude Record of @uncrewedTargetAltitudeKM km.
  description = We want you to set a new uncrewed altitude record! Reach @uncrewedTargetAltitudeKM km.
	genericTitle = Uncrewed Altitude Record
  genericDescription = We want you to set a new uncrewed altitude record!
  synopsis = Set an uncrewed altitude record of @uncrewedTargetAltitudeKM km.
  completedMessage = Congratulations! You've set a new uncrewed altitude record!
	
	agent = Federation Aeronautique Internationale

  autoAccept = true
	cancellable = true
	declinable = false
	
	prestige = Trivial

  targetBody = HomeWorld()

  // Can only have one active
  maxSimultaneous = 1

  // Contract rewards
  rewardFunds = @rewardFundsInternal * @RP0:globalHardContractMultiplier
	rewardReputation = @rewardReputationInternal
    
  DATA
  {
    title = This is the list of all of the altitude records
    type = List<float>
    soundingAlts = [ 10000, 20000, 30000, 40000, 50000, 60000, 80000, 100000, 120000, 140000, 160000, 180000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 2000000 ]
  }
  
  DATA
  {
    title = This is the current active index
    type = float
    soundingAltIndex = RP0_SoundingAltitudeIndex
  }
  
  DATA
  {
    title = This is the current Altitude Target
    type = float
    uncrewedTargetAltitude = @soundingAlts.ElementAt(@soundingAltIndex)
    uncrewedTargetAltitudeKM = @uncrewedTargetAltitude*0.001
  }

	DATA
	{
		type = float
		rewardFundsInternal = 200.0 + Min( @uncrewedTargetAltitude * 0.005, 5000 + @uncrewedTargetAltitude * 0.0005 )
	}	

	DATA
	{
		type = float
		rewardReputationInternal = 3.0 + Min( @uncrewedTargetAltitude * 0.00001, 10 + @uncrewedTargetAltitude * 0.000001 )
	}

  PARAMETER
  {
    name = ReachState
    type = ReachState

    minAltitude = @/uncrewedTargetAltitude
  }

  BEHAVIOUR
  {
    name = IncrementIndex
    type = Expression

    CONTRACT_COMPLETED_SUCCESS
    {
        RP0_SoundingAltitudeIndex = RP0_SoundingAltitudeIndex + 1
    }
  }

  REQUIREMENT
  {
    type = Expression
    title = Altitude

    expression = @/soundingAltIndex < @/soundingAlts.Count()
  }
}
