CONTRACT_TYPE
{
	name = RocketPlaneDevelopment
	group = X-Planes

	title = Experimental rocketplanes

	description = Design, build and launch a crewed rocketplane to achieve an altitude of @/altitudeKm km, a velocity of @/velocity m/s and return home safely.<br>The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays</b><br>This is a series of 4 contracts, of which $RocketPlaneDevelopment_Count have been completed.<br><color=white><b>After 2 completions, X-Planes High contract will become available.</b></color>&br;&br;<b><color="red">This contract will no longer be offered once you complete 'X-Planes High' or 'X-Planes High (Difficult)'!</color></b>
	genericDescription = Design, build and launch a crewed rocketplane to achieve a combination of altitude + velocity and return home safely.

	synopsis = Launch a crewed vessel to @/altitudeKm km.

	completedMessage = Congratulations on a successful flight!

	minExpiry = 1.0
	maxExpiry = 30.0
	deadline = 365 * RP1DeadlineMult()  // 1 year
	cancellable = true
	declinable = true
	autoAccept = false

	targetBody = HomeWorld()

	maxCompletions = 4
	maxSimultaneous = 1
	prestige = Trivial

	// reward block
	advanceFunds = Round((1750.0 + @VesselGroup/ReachAlt/minAltitude*0.04) * @RP0:globalHardContractMultiplier * @rewardFactor, 100)
	rewardFunds = @advanceFunds
	failureFunds = @advanceFunds * 0.5
	rewardReputation = 2
	failureReputation = 2

	REQUIREMENT
	{
		name = BreakSoundBarrier
		type = CompleteContract
		contractType = BreakSoundBarrier
	}

	REQUIREMENT
	{
		name = NotSubOrb
		type = AcceptContract
		contractType = CrewedSuborbital
		invertRequirement = True
	}

	REQUIREMENT
	{
		name = NotCrewedReachSpace
		type = AcceptContract
		contractType = CrewedReachSpace
		invertRequirement = True
	}

	REQUIREMENT
	{
		name = NotCrewedReachSpaceDifficult
		type = AcceptContract
		contractType = CrewedReachSpaceDifficult
		invertRequirement = True
	}

	REQUIREMENT
	{
		name = NotCompletedXPH
		type = CompleteContract
		contractType = CrewedReachSpace
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = NotCompletedXPHD
		type = CompleteContract
		contractType = CrewedReachSpaceDifficult
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = NotCompletedCrewedFO
		type = CompleteContract
		contractType = first_OrbitCrewed
		invertRequirement = true
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		CONTRACT_OFFERED
		{
			RocketPlaneDevelopment_Count = $RocketPlaneDevelopment_Count + 0
			RPD_Completion = ($RPD_Completion + 0) == 0 ? (UniversalTime() - 120 * 86400) : ($RPD_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			RocketPlaneDevelopment_Count = $RocketPlaneDevelopment_Count + 1
			RPD_Completion = UniversalTime()
		}
	}

	DATA
	{
		type = int
		antiGrindCompletion = $RPD_Completion == 0 ? (UniversalTime() - @expectedDays * 86400) : $RPD_Completion
	}

	DATA
	{
		type = float
		expectedDays = 120

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 3 - 0.05, 1), 2) / 1.5607
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	DATA
	{
		type = List<float>
		altitudesKm = [ 12.5, 15, 20, 28 ]
	}

	DATA
	{
		type = List<float>
		velocities = [ 320, 400, 550, 700 ]
	}

	DATA
	{
		type = int
		index = $RocketPlaneDevelopment_Count
	}

	DATA
	{
		type = float
		altitudeKm = @altitudesKm.ElementAt(@index)
	}

	DATA
	{
		type = float
		velocity = @velocities.ElementAt(@index)
	}

	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Reach @/altitudeKm km with a crewed vessel.
		define = crewedSuborbitalCraft
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 1
			maxCrew = 99
			title = Have at least 1 crewmember on board
			hideChildren = true
		}
		PARAMETER
		{
			name = NoJet
			type = PartValidation
			title = Vessel is a rocketplane (no jet engines allowed)
			hideChildren = true
			NONE
			{
				partModule = ModuleEnginesAJEJet
			}
		}
		PARAMETER
		{
			name = ReachVel
			type = ReachState
			situation = FLYING
			minSpeed = @/velocity
			minAltitude = 10000
			maxAltitude = @/altitudeKm * 1000
			disableOnStateChange = true
			title = Reach @/velocity m/s between 10km and @/altitudeKm km of altitude
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			minAltitude = @/altitudeKm * 1000
			disableOnStateChange = true
			title = Reach @minAltitude meters
			hideChildren = true
		}
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Home Safely
			hideChildren = true
			completeInSequence = true
		}
	}
}
