CONTRACT_TYPE
{
	name = DownrangeIntermediate
	group = SoundingRockets
	
	title = Downrange Distance LV Development (Intermediate)
	
	description = Design, build and launch a rocket with @/missionPayload.Print() units of Sounding Rocket Payload to a downrange distance of @/missionDistance.Print() km. <b><color="white">Your rocket must be suborbital (over 140 km) for the contract to be completed.</color></b> Perfecting this is part of Launch Vehicle development to utilize a gravity turn and tune your ascent profile and angle of attack. The current distance that your rocket has traveled can be seen in the contract parameters screen. It will update in real time. A better option is to use the MechJeb information called Downrange Distance. It can be added to any window using the Custom Window Editor and is found in the Flight Recorder section.&br;&br;<b><color="green">NOTE: The distance that you see provided by KSP in the F3 screen is not accurate, so please do not base your attempts off of it.</color></b>&br;&br;<b><color="red">This contract will no longer be offered once you complete the First Orbit contract!</color></b>

	genericDescription = Deliver a new payload to a specified downrange distance. This contract is within your capabilities.
	
	synopsis = Launch a rocket with @/missionPayload.Print() units of Sounding Rocket Payload to a downrange distance of @/missionDistance.Print() km.
	
	completedMessage = Congratulations on a successful launch!
	
	minExpiry = 1.0
	maxExpiry = 30.0
	deadline = 365
	cancellable = true
	declinable = true
	autoAccept = false
	
	targetBody = HomeWorld()
	
	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial
	
	// reward block
	advanceFunds = Max(( @halfPayout * @RP0:globalHardContractMultiplier ) + ( 500 * ( 4 / @/soundingDifficultyLevel ) ), 3925)
	rewardFunds = @advanceFunds * 1.2
	failureFunds = @advanceFunds * 0.5
  
  
  // The global modifiers for all sounding rockets are stored in the main Groups.cfg file in the root Contracts folder
  DATA
  {
	// We want to set this to lag 1 level behind the current difficulty level
    title = Sets the current difficulty level based on the completed mission increment
    type = float
    soundingDifficultyIndex = $RP0_SoundingDifficulty
    soundingDifficultyLevel = Min( Max( @soundingDifficultyIndex - 1, 1), @RP0:maxSoundingDifficultyLevels )
  }
  
  DATA
  {
    title = These are the minimum and maximum payouts for each of the difficulty levels
    type = float
    baseMinimumPayment = 3500
    // Each level adds 1500 to the previous level, so by multiplying the previous level by 1500 and adding it to the base, we get the proper amount
    currentMinPayment = @baseMinimumPayment + (( @soundingDifficultyLevel - 1 ) * 1125 )
    currentMaxPayment = @currentMinPayment * 1.1
  }
  
  DATA
  {
    title = These are the minimum and maximum payloads for each of the difficulty levels
    type = float
	indexAbove18 = @soundingDifficultyLevel - 17
    minimumPayload = @indexAbove18 < 1 ? 50 : 50 + ( 25 * @indexAbove18 )
    baseMaxPayload = 100
    // Each level adds 200 to the previous level, so by multiplying the previous level by 200 and adding it to the base, we get the proper amount
    currentMinPayload = 
    currentMaxPayload = Min( @baseMaxPayload + (( @soundingDifficultyLevel - 1 ) * 200 ), @RP0:payloadMax )
  }
  
  DATA
  {
    title = Generate the actual payload for this specific mission
    type = float
    totalPayload = Random( @minimumPayload, @currentMaxPayload )
  }
  
  DATA
  {
    title = Payload Rounded Off
    type = int
    missionPayload = int( Round( @totalPayload, 5 ))
  }
  
  DATA
  {
    title = Generate the actual payment amount for this specific mission
    type = float
    newPayout = Random( @currentMinPayment, @currentMaxPayment )
    calcPayout = @newPayout / @RP0:globalHardContractMultiplier
  }
  
  DATA
  {
    title = Round the Payout
    type = int
    totalPayout = int( Round( @calcPayout, 100 ))
  }
  
  DATA
  {
    title = Calculate the distance for this mission
    type = float
    calcDistance = ( @totalPayout - @RP0:distanceBaseLaunchValue ) / ( @RP0:distanceMod * ( Pow( @totalPayload / @RP0:payloadDivisor, @RP0:distancePayloadExponent ) + @RP0:payloadAdder ))
  }
  
  DATA
  {
    title = Generate the actual distance for this specific mission
    type = int
    missionDistance = int( Round( @calcDistance, 10 ))
    missionDistanceMeters = @missionDistance * 1000
  }
  
  DATA
  {
    title = Split the Payout
    type = int
    halfPayout = int( Round( @totalPayout / 2 ))
  }
	
	REQUIREMENT
	{
		name = All of the below most be completed
		type = All
		
		REQUIREMENT
		{
			name = AltitudeRecord100k // Karman line
			type = AltitudeRecord
			minAltitude = 100000
			title = Must have reached 100 km
		}
		
		// REQUIREMENT
		// {
			// name = AcceptContractOrbit
			// type = AcceptContract
			// contractType = first_OrbitUncrewed
			// invertRequirement = true
		// }
		REQUIREMENT
		{
			name = CompleteOrbit
			type = CompleteContract
			contractType = first_OrbitUncrewed
			invertRequirement = true
		}
		
		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketDifficult
			invertRequirement = true
		}
		
		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketIntermediate
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = DownrangeDifficult
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketBio
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketFilm
			invertRequirement = true
		}
	}
	
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		
		title = Reach @/missionDistance.Print() km downrange with @/missionPayload.Print() units of payload.
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
    
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
    
		PARAMETER
		{
			name = HasSoundingPayload
			type = HasResource
			resource = SoundingPayload
			minQuantity = @/missionPayload
			title = Have a SoundingPayload of at least @minQuantity units on the craft
		}
		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			minAltitude = 140000
			disableOnStateChange = true
			title = Reach an altitude of at least 140 km
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachDistance
			type = DownrangeDistance
			distance = @/missionDistanceMeters
			title = Reach a downrange distance of at least @/missionDistance.Print() km
		}
	}
}
