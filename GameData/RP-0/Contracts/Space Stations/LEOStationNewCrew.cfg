CONTRACT_TYPE
{
	name = NewCrewLEOStation
	title = Send a New Crew to @/targetVessel1
	genericTitle = Send a New Crew to Your LEO Station
	
	group = SpaceStations
	agent = Stations

	description = The @/targetVessel1 station has become without any crew, it's time to populate it. Send a new crew of at least @/RequiredCrew for a stay of at least 1 month.&br;The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of it's nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays</b>
	genericDescription = Send a crew to your space station.

	synopsis = Send a new crew to @/targetVessel1

	completedMessage = Congratulations! The new crew is safely aboard your station awaiting further orders.

	sortKey = 1506
    
    deadline = 180 * RP1DeadlineMult()
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1
	
	targetBody = HomeWorld()
	
	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial

	// reward block
	advanceFunds = Round((6000 * (4 + @/RequiredCrew) * @RP0:globalHardContractMultiplier * @rewardFactor), 100)
	rewardFunds = @advanceFunds * 1.2
	failureFunds = @advanceFunds * 0.5

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = first_spaceStation
	}

	// ************ DATA ************

	DATA
	{
		type = int
		antiGrindCompletion = $StRot_Completion == 0 ? (UniversalTime() - @expectedDays * 86400) : $StRot_Completion
	}

	DATA
	{
		type = float
		expectedDays = 360

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 6 - 0.5, 1), 2) / 2.4594
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}
	
	DATA
	{
		type = Vessel
		uniquenessCheck = CONTRACT_ACTIVE
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CelestialBody() == @targetBody && v.FreeDockingPorts()>0 && v.CrewCount() == 0).SelectUnique()
		title = Must have an open Docking Port and no crew in the station
	}
	
	DATA
	{
		type = float
		RequiredCrew = Round(Max(@/targetVessel1.CrewCapacity() / 2, 2),1)
		title = Get amount of crew to be sent
	}
	
	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		
		CONTRACT_OFFERED
		{
			StRot_Completion = ($StRot_Completion + 0) == 0 ? (UniversalTime() - 360 * 86400) : ($StRot_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			StRot_Completion = UniversalTime()
		}
	}

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = NewCrew
		type = VesselParameterGroup
		title = Send a New Crew to @/targetVessel1
		disableOnStateChange = true

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = @/RequiredCrew
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
		}
		PARAMETER
	    {
		    name = DockWithStation
		    type = Docking
		    vessel = @/targetVessel1
		    title = Dock @/targetVessel1
		    hideChildren = true
		    disableOnStateChange = true
		    completeInSequence = true
	    }
	    PARAMETER
		{
			name = Duration
			type = Duration
			duration =  30d
			preWaitText = Transfer to @/targetVessel1.
			waitingText = Orbiting...
			completionText = Minimum stay completed.
		}
	}
}
