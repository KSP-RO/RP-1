CONTRACT_TYPE
{
	name = SoundingRocketDifficult
	group = SoundingRockets

	title = Altitude Sounding Rocket (Difficult)

	description = Design, build and launch a sounding rocket with @/missionPayload.Print() units of payload to @/missionAltitude.Print() km. For best results, place the sounding payload into a high pressure steel or aluminum tank using the Tank UI in the PAW.&br;The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays</b>&br;&br;<b><color="red">This contract will no longer be offered once you complete the First Orbit contract!</color></b>

	genericDescription = Deliver a new payload to a specified altitude. This contract will stretch your capabilities and enable harder contracts.

	synopsis = Launch a sounding rocket with @/missionPayload.Print() units of payload to @/missionAltitude.Print() km.

	completedMessage = Congratulations on a successful launch! The rocket has delivered the payload.

	deadline = 365 * RP1DeadlineMult()
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1

	targetBody = HomeWorld()

	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial

	// reward block
	advanceFunds = Round(Max(( @halfPayout * @RP0:globalHardContractMultiplier ) + ( 500 * ( 4 / @/soundingDifficultyLevel ) ), 3925) * @rewardFactor * @noPlaneFundMult, 100)
	rewardFunds = @advanceFunds * 1.2
	failureFunds = @advanceFunds * 0.5

	DATA
	{
		type = float
		noPlaneFundMult = RP1YesPlanes() ? 1 : @RP0:noPlaneFundMult
	}

	DATA
	{
		type = int
		antiGrindCompletion = $SRA_Completion == 0 ? (UniversalTime() - @expectedDays * 86400) : $SRA_Completion
	}

	DATA
	{
		type = float
		expectedDays = 90

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 3 - 0.05, 1), 2) / 1.5607
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

  // The global modifiers for all sounding rockets are stored in the main Groups.cfg file in the root Contracts folder
  DATA
  {
    title = Sets the current difficulty level based on the completed mission increment
    type = float
    soundingDifficultyIndex = $RP0_SoundingDifficulty
    soundingDifficultyLevel = Min( Max( @soundingDifficultyIndex, 1), @RP0:maxSoundingDifficultyLevels )
  }

  DATA
  {
    title = These are the minimum and maximum payouts for each of the difficulty levels
    type = float
    baseMinimumPayment = 3500
    // Each level adds 1000 to the previous level, so by multiplying the previous level by 1000 and adding it to the base, we get the proper amount
    currentMinPayment = @baseMinimumPayment + (( @soundingDifficultyLevel - 1 ) * 1500 )
    currentMaxPayment = @currentMinPayment * 1.1
  }

  DATA
  {
    title = These are the minimum and maximum payloads for each of the difficulty levels
    type = float
    minimumPayload = 50
    baseMaxPayload = 200
    // Each level adds 200 to the previous level, so by multiplying the previous level by 200 and adding it to the base, we get the proper amount
    currentMaxPayload = Min( @baseMaxPayload + (( @soundingDifficultyLevel - 1 ) * 200 ), @RP0:payloadMax )
  }

  DATA
  {
    title = Generate the actual payload for this specific mission
    type = float
    totalPayload = Random( @minimumPayload, @currentMaxPayload )
  }

  DATA
  {
    title = Payload Rounded Off
    type = int
    missionPayload = int( Round( @totalPayload, 5 ))
  }

  DATA
  {
    title = Generate the actual payment amount for this specifc mission
    type = float
    newPayout = Random( @currentMinPayment, @currentMaxPayment )
    calcPayout = @newPayout / @RP0:globalHardContractMultiplier
  }

  DATA
  {
    title = Round the Payout
    type = int
    totalPayout = int( Round( @calcPayout, 100 ))
  }

  DATA
  {
    title = Calculate the altitude for this mission
    type = float
    calcAltitude = ( @totalPayout - @RP0:baseLaunchValue ) / ( @RP0:overallMod * ( Pow( @totalPayload / @RP0:payloadDivisor, @RP0:payloadExponent ) + @RP0:payloadAdder ))
  }

  DATA
  {
    title = Generate the actual altitude for this specific mission
    type = int
    missionAltitude = int( Round( @calcAltitude, 10 ))
    missionAltitudeMeters = @missionAltitude * 1000
  }

  DATA
  {
    title = Split the Payout
    type = int
    halfPayout = int( Round( @totalPayout / 2 ))
  }

	REQUIREMENT
	{
		name = All of the below most be completed
		type = All

		REQUIREMENT
		{
			name = AltitudeRecord100k // Karman line
			type = AltitudeRecord
			minAltitude = 100000
			title = Must have reached 100 km
		}

		// REQUIREMENT
		// {
			// name = AcceptContractOrbit
			// type = AcceptContract
			// contractType = first_OrbitUncrewed
			// invertRequirement = true
		// }
		REQUIREMENT
		{
			name = CompleteOrbit
			type = CompleteContract
			contractType = first_OrbitUncrewed
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketIntermediate
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = DownrangeDifficult
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = DownrangeIntermediate
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketBio
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketAdvancedBio
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketFilm
			invertRequirement = true
		}

	}


	BEHAVIOUR
    {//set the new difficulty
        name = SetMaxSoundingDifficulty
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            RP0_SoundingDifficulty = $RP0_SoundingDifficulty + 1
        }
    }

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			SRA_Completion = ($SRA_Completion + 0) == 0 ? (UniversalTime() - 90 * 86400) : ($SRA_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			SRA_Completion = UniversalTime()
		}
	}

	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup

		title = Reach @/missionAltitude.Print() km with @/missionPayload.Print() units of Sounding payload.

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}

		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}

		PARAMETER
		{
			name = HasSoundingPayload
			type = HasResource
			resource = SoundingPayload
			minQuantity = @/missionPayload -0.01
			title = Have a SoundingPayload of at least @/missionPayload.Print() units on the craft
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			minAltitude = @/missionAltitudeMeters
			completeInSequence = true
      title = Reach an altitude of at least @/missionAltitude.Print() km
		}
	}
}
