CONTRACT_TYPE {
	name = SunSyncWeatherSat
	group = SatellitesMeteorological
	sortKey = 502
	
	title = Sun-Synchronous Weather Satellite @numeral
	genericTitle = Sun-Synchronous Weather Satellite
	description = A Sun-synchronous orbit is a geocentric orbit that combines altitude and inclination it is an orbit arranged so that it precesses through one complete revolution each year, thus the satellite passes over any given point of the planet's surface at the same local solar time. Polar orbiting weather satellites are launched in sun-synchronous orbits that allow them to observe the same area on Earth twice a day with the same general lighting. The images they can return are of much higher resolution than geostationary satellites because their orbit is much lower. Design and launch a class @numeral sun-synchronous weather satellite to produce high-resolution weather imagery.<br>You will develop increasingly advanced classes of sun-synchronous weather satellites. The payload required will increase with each new satellite series.<br><b>The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload to operational control after being placed sucessfully in orbit.</b><br><b>Note that sun-synchronous orbits are slightly retrograde, so your launch azimuth will be to the north-northwest. It takes more delta-v to launch into a sun-synchronous orbit than a normal polar orbit.</b><br>The class @numeral series of sun-synchronous weather satellites contains @length contracts, of which @seriesIndex have been completed.<br>Real life examples: too many to list
	genericDescription = Put a weather satellite into sun-synchronous orbit.
	synopsis = Put a weather satellite with @payload units of payload into sun-synchronous orbit
	completedMessage = Success! The satellite is functional and ready for operation.
		
	minExpiry = 0
	maxExpiry = 0
	maxCompletions = 28
	maxSimultaneous = 1
	deadline = 540	// 1.5 years

	targetBody = HomeWorld()	

	// ************ REWARDS ************
	prestige = Trivial
	rewardReputation = @reward
	advanceFunds = @rewardReputation * 100
	failureReputation = @advanceFunds * 0.0005

	DATA {
		type = float
		index = RP0SunSyncWeatherIndex
	}	
	BEHAVIOUR {
		name = IncrementIndex
		type = Expression
		CONTRACT_COMPLETED_SUCCESS {
			RP0SunSyncWeatherIndex = RP0SunSyncWeatherIndex + 1
		}
	}	

	// *** Series Number ***
	DATA {
		type = List<float>
		serieses = [1, 1, 1, 1,		2, 2, 2, 2,	2, 2,	2, 2, 2, 2, 2, 2,		3, 3, 3, 3,	3, 3, 3, 3,		4, 4, 4, 4, 4, 4, 4, 4	]
	}	
	DATA {
		type = float
		series = @serieses.ElementAt(@index)
	}	
	
	// *** Contract Number ***
	DATA {
		type = List<float>
		seriesIndices = [0, 1, 2, 3,	0, 1, 2, 3,	4, 5, 6, 7,	8, 9, 10, 11,	0, 1, 2, 3,	4, 5, 6, 7,		0, 1, 2, 3,	4, 5, 6, 7	]
	}	
	DATA {
		type = float
		seriesIndex = @seriesIndices.ElementAt(@index)
	}	

	// *** Roman Numeral ***
	DATA {
		type = List<string>
		numerals = [ "I", "II", "III", "IV" ]
	}
	DATA {
		type = string
		hidden = true
		numeral = @numerals.ElementAt(@series-1)
	}		

	// *** Series Lengths ***
	DATA {
		type = List<float>
		lengths = [		4,		12,		8,		8	]
	}
	DATA {
		type = float
		length = @lengths.ElementAt(@series-1)
	}	
	
	// *** Payloads ***
	DATA {
		type = List<float>
		payloads = [	150,	300,	730,	1500 ] // TOS, ITOS, TIROS-N, Advanced TIROS-N/NOAA KLM
	}
	DATA {
		type = float
		payload = @payloads.ElementAt(@series-1)
	}	
		
	// *** Rewards ***
	DATA {
		type = List<float>
		rewards = [		300,	400,	500,	600 ]
	}
	DATA {
		type = float
		reward = @rewards.ElementAt(@series-1)
	}	

	// ************ REQUIREMENTS ************
	REQUIREMENT	{
		name = CompleteContract
		type = CompleteContract
		contractType = EarlyWeatherSat
		minCount = 8
		title = Complete @contractType Contract
	}

	// ************ PARAMETERS ************	
	PARAMETER {
		name = SunSyncWeatherSat
		type = VesselParameterGroup
		define = SunSyncWeatherSat
		dissassociateVesselsOnContractCompletion = true
		title = Maintain a sun-synchronous weather satellite in the target orbit for 6 months
		
		duration = 180d

		PARAMETER {
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER {
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER {
			name = HasMeteorologicalPayload
			type = HasResource
			resource = MeteorologicalPayload
			minQuantity = @/payload-0.1
			title = Have a MeteorologicalPayload of at least @/payload units on the craft
			hideChildren = true
		}
		PARAMETER
		{
			name = None
			type = None
			title = Have no other types of payload aboard
			hideChildren = true
			
			PARAMETER {
				name = HasNoCommunicationsPayload
				type = HasResource
				resource = CommunicationsPayload
				title = Have no CommunicationsPayload aboard
				hideChildren = true
			}
			PARAMETER {
				name = HasNoNavigationalPayload
				type = HasResource
				resource = NavigationalPayload
				title = Have no NavigationalPayload aboard
				hideChildren = true
			}
			PARAMETER {
				name = HasNoSoundingPayload
				type = HasResource
				resource = SoundingPayload
				title = Have no SoundingPayload aboard
				hideChildren = true
			}
		}
		PARAMETER {
			name = ReachOrbit
			type = Orbit
			minInclination = 99
			maxInclination = 99.5
			maxEccentricity = 0.001
			minPeA = 900000
			maxApA = 1000000
			title = Achieve the target orbit (Note: this orbit is slightly retrograde)   
		}	
	}	
	PARAMETER {
		name = VesselPowerCheck
		type = VesselParameterGroup
		vessel = SunSyncWeatherSat
		completeInSequence = true
		hideChildren = true
		title = Craft must have power after @/SunSyncWeatherSat/duration

			PARAMETER {
				name = HasPower
				type = HasResource
				resource = ElectricCharge
				minQuantity = 1.0
				hideChildren = true
			}
		}		
	}
	BEHAVIOUR {
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = SunSyncWeatherSat
	}
	BEHAVIOUR {
	name = VesselDestroyed
	type = DialogBox

		DIALOG_BOX {
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5

			TEXT {
				text = The contract has been completed successfully. Control of the sun-synchronous weather satellite has been transferred back to meteorological operations.
			}
		}
	}	
}
