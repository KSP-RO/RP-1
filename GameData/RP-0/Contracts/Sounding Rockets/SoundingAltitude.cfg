CONTRACT_TYPE
{
	name = SoundingRocketAltitude
	group = SoundingRockets
	
	title = Altitude Sounding Rocket
	
	description = Design, build and launch a sounding rocket with @/missionPayload.Print() units of payload to @/missionAltitude.Print() km.&br;&br;<b><color="red">This contract will no longer be offered once you complete the First Orbit contract!</b></color>
	genericDescription = Deliver a new payload to a specified altitude.  This contract will stretch your capabilities and enable harder contracts.
	synopsis = Launch a sounding rocket with @/missionPayload.Print() units of payload to @/missionAltitude.Print() km.
	
	completedMessage = Congratulations on a successful launch! The rocket has delivered the payload.
	
	minExpiry = 1.0
	maxExpiry = 1.0
	deadline = 365
	cancellable = true
	declinable = true
	autoAccept = false
	
	targetBody = HomeWorld()
	
	maxCompletions = 6
	maxSimultaneous = 1
	
	// reward block
	prestige = Trivial
	advanceFunds = 0
	rewardFunds = @totalPayout * @RP0:rewardMultiplier
	failureFunds = 0
  
  
  // The global modifiers for all sounding rockets are stored in the main Groups.cfg file in the root Contracts folder
  DATA
  {
    title = Sets the current difficulty level based on the completed mission increment
    type = float
    soundingDifficultyIndex = $RP0_SoundingDifficulty
    soundingDifficultyLevel = Min(@soundingDifficultyIndex, @RP0:maxDifficultyLevels )
  }
  
  DATA
  {
    title = Payload Rounded Off
    type = int
    missionPayload = 50
  }
  
  DATA
  {
    title = Generate the actual payment amount for this specifc mission
    type = float
    calcPayout = 500 * Pow(2, @soundingDifficultyLevel)
  }
  
  DATA
  {
    title = Round the Payout
    type = int
    totalPayout = int( Round( @calcPayout, 100 ))
  }
  
  DATA
  {
    title = Calculate the altitude for this mission
    type = float
	calcAltitude = 30 * Pow(2, @soundingDifficultyLevel)
  }
  
  DATA
  {
    title = Generate the actual altitude for this specific mission
    type = int
    missionAltitude = int( Round( @calcAltitude, 10 ))
    missionAltitudeMeters = @missionAltitude * 1000
  }
	
	REQUIREMENT
	{
		name = All of the below most be completed
		type = All
	
		REQUIREMENT
		{
			name = CompleteOrbit
			type = CompleteContract
			contractType = first_OrbitUncrewed
			invertRequirement = true
		}	
	}
		
	
	BEHAVIOUR
    {
        name = SetMaxSoundingDifficulty
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            RP0_SoundingDifficulty = $RP0_SoundingDifficulty + 1
        }
    }
	
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		
		title = Reach @/missionAltitude.Print() km with @/missionPayload.Print() units of payload.
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
    
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
    
		PARAMETER
		{
			name = HasSoundingPayload
			type = HasResource
			resource = SoundingPayload
			minQuantity = @/missionPayload
			title = Have a SoundingPayload of at least @minQuantity units on the craft
		}
		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			minAltitude = @/missionAltitudeMeters
			completeInSequence = true
      title = Reach an altitude of at least @/missionAltitude.Print() km
		}
	}
}
