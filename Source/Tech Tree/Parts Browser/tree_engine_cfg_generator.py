import os
import part_data
from string import Template

output_dir = os.getenv('PB_OUTPUT_DIR', "../../../GameData/RP-1/Tree/")

tree_engine_header = """
//*********************************************************************************************
//  ENGINE_CONFIG TECH TREE PLACEMENT
//	This places the Engine_Config parts and creates the upgrade icons for the tree
//  
//	DO NOT EDIT THIS FILE DIRECTLY!!!
//	This file is generated using the RP-1 Parts Browser
//
//*********************************************************************************************

@PART[*]:HAS[@MODULE[Module*EngineConfigs]]:BEFORE[RealismOverhaulEnginesPost]
{
        @MODULE[Module*EngineConfigs],*
        {
"""

tree_engine_mid = """
        }
}
"""

module_engine_config_template = Template("""
            @CONFIG[${name}]
            {
                %techRequired = ${technology}
                %cost = ${cost}${optional_attributes}
            }
""")

part_upgrade_config_template = Template("""
PARTUPGRADE
{
        name = RFUpgrade_${name}
        partIcon = RO-H1-RS27 // FIXME Once we get dedicated model
        techRequired = ${technology}
        entryCost = 0
        cost = 0      
        title = ${engine_config} Engine Upgrade: ${name} Config
        basicInfo = Engine Performance Upgrade
        manufacturer = Engine Upgrade
        deleteme = 1
        description = The ${engine_config} Engine now supports the ${name} configuration for increased performance. Unlock it in the VAB/SPH through the engine configs interface.\\n\\n${description}
}

PART
{
    name = RFUpgrade_engineConfigSource_${name}
    engineType = ${engine_config}
}

@PART[RFUpgrade_engineConfigSource_${name}]:AFTER[RealismOverhaulEngines]
{
    %MODULE[Module*EngineConfigs] {
        @name = ModuleEngineConfigs
        %CONFIG[${name}] {
            &specLevel = operational
        }
    }
}

@PARTUPGRADE[RFUpgrade_${name}]:AFTER[RealismOverhaulEngines]
{
    %description = #$$description$$\\nAvailable at specLevel $$@PART[RFUpgrade_engineConfigSource_${name}]/MODULE[ModuleEngineConfigs]/CONFIG[${name}]/specLevel$$
    // TODO: could add any number of other useful fields from the CONFIG here. cost? description?
}

!PART[RFUpgrade_engineConfigSource_${name}]:AFTER[RealismOverhaulEngines]
{
}
""")

def generate_engine_tree(parts, module_tags_with_prefixes):
    engine_configs = ""
    part_upgrades = ""
    for part in parts:
        if "Engine_Config" == part["mod"] and not part['orphan']:
            engine_configs += generate_engine_config(part, module_tags_with_prefixes)
            if 'upgrade' in part and part['upgrade'] is True:
                part_upgrades += generate_part_upgrade_config(part)
    text_file = open(output_dir + "TREE-Engines.cfg", "w", newline='\n')
    text_file.write(tree_engine_header)
    text_file.write(engine_configs)
    text_file.write(tree_engine_mid)
    text_file.write(part_upgrades)
    text_file.close()
        
def generate_engine_config(part, module_tags_with_prefixes):
    optional_attributes = ""
    for module_tag in part['module_tags']:
        # some module tags have a prefix (usually 'Tag') so if it has a prefix, prefix it.
        prefix = module_tags_with_prefixes[module_tag].strip()
        if prefix == "Tag":
            optional_attributes += """
                tag = """ + module_tag
    if 'description' in part and len(part['description']) > 0:
        optional_attributes += """
                %description = """ + part['description']
    if 'upgrade' in part and part['upgrade'] is True:
        optional_attributes += """
                *@PARTUPGRADE[RFUpgrade_""" + part['name'] + """]/deleteme -= 1"""
    return module_engine_config_template.substitute(name=part['name'], technology=part['technology'], cost=part['cost'], optional_attributes=optional_attributes)

def generate_part_upgrade_config(part):
    return part_upgrade_config_template.substitute(name=part['name'], technology=part['technology'], engine_config=part['engine_config'], description=part['description'])
    
