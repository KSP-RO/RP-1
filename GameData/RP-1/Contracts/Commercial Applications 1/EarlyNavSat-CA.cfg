CONTRACT_TYPE
{
	name = EarlyNavSat-CA
	title = Commercial Navigation Satellite (Early)
	group = CommApp	

	description = <b>Program: Early Commercial Applications<br>Type: <color=blue>Optional</color></b><br><br>The First Navigation Satellite contract proved that measuring signals from a satellite is an effective method for determining position data on the surface of the Earth. Expand on this capability to create the first rudimentary satellite-based precision location network. At least 3 satellites are required to locate a position on a sphere, with a fourth necessary to determine vertical position. Launch at least 4 more navigation satellites into polar orbits.<br><br><b><color=yellow>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b><br><br><b>The reward of this contract will slowly increase over time but will be reset to 0 after each completion.<br><b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @RP0:expectedDays_EarlyComSat<br>Number of Contracts Completed: @index / unlimited</b>
	genericDescription = Put a satellite with the required amount of navigation satellite payload into the desired orbit.

	synopsis = Launch a Navigation Satellite for a customer.

	completedMessage = Success! The navigation satellite was launched into the proper orbit. Precision satellite-based navigation is one step closer to being a reality.

	sortKey = 499

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = 0

	targetBody = HomeWorld()


	// ************ REWARDS ************
	prestige = Trivial       // 1.0x
	advanceFunds = 0
	rewardFunds = 0
	rewardScience = 0
	rewardReputation = Round(55 * Pow(@EarlyNavSat/Orbit/minApA / 6000000, 0.5) * Pow((@EarlyNavSat/HasNavSatPayload/minQuantity / 325), 0.5) * @rewardFactor, 1)
	failureReputation = 0 // was @rewardReputation
	failureFunds = 0

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = ProgramActive
		type = ProgramActive
		program = CommercialApplications1
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstNavSat-CA
		title = Complete First Navigation Satellite contract
	}

	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = EarlyNavNetwork3
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = EarlyNavNetwork4
		invertRequirement = true
	}

	DATA
	{
		type = int
		index = $EarlyNavSat_Count + 0
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			RepeatSat_Completion = ($RepeatSat_Completion + 0) == 0 ? (UniversalTime() - @RP0:expectedDays_EarlyComSat * 86400) : ($RepeatSat_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			EarlyNavSat_Count = $EarlyNavSat_Count + 1
			RepeatSat_Completion = UniversalTime()
		}
	}

	DATA
	{
		type = int
		antiGrindCompletion = $RepeatSat_Completion == 0 ? (UniversalTime() - @RP0:expectedDays_EarlyComSat * 86400) : $RepeatSat_Completion
	}

	DATA
	{
		type = float
		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @RP0:expectedDays_EarlyComSat * 20 - 9, 1), 2) / 3.46
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	DATA
	{
		type = float
		payload = Round(Random(60,120),10)
	}

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = EarlyNavSat
		type = VesselParameterGroup
		define = EarlyNavSat
		dissassociateVesselsOnContractCompletion = true
		title = Navigation Satellite (Early)

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a new vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}

		PARAMETER
		{
			name = HasNavSatPayload
			type = HasResource
			resource = NavSatPayload
			minQuantity = @/payload-0.1
			title = Have a NavSatPayload of at least @/payload units on the craft
			hideChildren = true
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minInclination = 89
			maxInclination = 91
			minPeA = Round(Random(300000, 400000), 10000)
			minApA = Round(Random(500000, 1000000), 10000)
			maxApA = @minApA + 50000
			disableOnStateChange = true
			title = Achieve orbit within the parameters

			PARAMETER
			{
				name = Duration
				type = Duration

				duration = 2m

				preWaitText = Check for stable orbit
				waitingText = Checking for stable orbit
				completionText = Stable orbit: Confirmed
			}	
		}
	}

	BEHAVIOUR
	{
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = EarlyNavSat
	}

	BEHAVIOUR
	{
		name = VesselDestroyed
		type = DialogBox
		DIALOG_BOX
		{
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5
			TEXT
			{
				text = The contract has been completed successfully and the satellite has been transferred to the customer.
			}
		}
	}
}
