CONTRACT_TYPE
{
	name = DistanceSoundingDifficult
	group = SuborbRocketDev
	
	tag = exclude_SoundingRocket

	title = Downrange Distance LV Development (Difficult)

	description = <b>Program: Early Rocket Development<br>Type: <color=blue>Optional</color></b><br><br>Design, build, and launch a rocket with @/missionPayload.Print() units of Sounding Rocket Payload to a downrange distance of @/missionDistance.Print() km. @RP0:soundingTankAdvice <b><color="white">Your rocket must be suborbital (over 140 km) for the contract to be completed. @RP0:avionics50sAdvice</color></b> Perfecting this is part of Launch Vehicle development to utilize a gravity turn and tune your ascent profile and angle of attack. The current distance that your rocket has traveled can be seen in the contract parameters screen. It will update in real time. A better option is to use the MechJeb information called Downrange Distance. It can be added to any window using the Custom Window Editor and is found in the Flight Recorder section.<br><br><b><color="green">@RP0:f3BadAdvice</color></b><br><br>The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @RP0:expectedDays_DistanceSounding</b>

	genericDescription = Launch a certain amount of sounding payload to a specified downrange distance. This contract is repeatable and the requirements for payload and range will gradually increase. This will be more difficult than the intermediate version, but will offer greater rewards.

	synopsis = Launch a rocket with @/missionPayload.Print() units of Sounding Rocket Payload to a downrange distance of @/missionDistance.Print() km.

	completedMessage = Congratulations on a successful launch!
	
	sortKey = 106

	deadline = 0
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1

	targetBody = HomeWorld()

	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial

	// ************ REWARDS ************
	prestige = Trivial       // 1.0x
	advanceFunds = 0
	rewardScience = 0
	rewardFunds = 0
	failureFunds = 0
	rewardReputation = Round(40 * @rewardFactor, 1)
	failureReputation = 0 // was @rewardReputation

	DATA
	{
		type = int
		antiGrindCompletion = $SRD_Completion == 0 ? (UniversalTime() - @RP0:expectedDays_DistanceSounding * 86400) : $SRD_Completion
	}

	DATA
	{
		type = float
		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @RP0:expectedDays_DistanceSounding * 3 - 0.05, 1), 2) / 1.5607
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	// The global modifiers for all sounding rockets are stored in the main Groups.cfg file in the root Contracts folder
	DATA
	{
		title = Sets the current difficulty level based on the completed mission increment
		type = int
		soundingDifficultyLevel = Min(Max(($RP0_DistanceDifficulty + 0), 1), @RP0:maxDistanceDifficultyLevels)
	}
	
	DATA
	{
		title = These are the payouts for each of the difficulty levels
		type = float
		currentPayment = @RP0:distanceBasePayment + (@soundingDifficultyLevel * @RP0:distancePaymentPerLvl)
	}

	DATA
	{
		title = Generate the actual payload for this specific mission
		type = float
		totalPayload = 500
	}

	DATA
	{
		title = Payload Rounded Off
		type = int
		missionPayload = int(@totalPayload)
	}
	
	DATA
	{
		title = Generate the actual payment amount for this specific mission
		type = float
		calcPayout = @currentPayment / 2.4
	}

	DATA
	{
		title = Calculate the distance for this mission
		type = float
		calcDistance = (@calcPayout - @RP0:distanceBaseLaunchValue) / (@RP0:distanceMod * (Pow(@totalPayload / @RP0:payloadDivisor, @RP0:distancePayloadExponent) + @RP0:payloadAdder))
	}

	DATA
	{
		title = Generate the actual distance for this specific mission
		type = int
		missionDistance = int(Round(@calcDistance, 10))
		missionDistanceMeters = @missionDistance * 1000
	}
	
	// ************ REQUIREMENTS ************
	REQUIREMENT
	{
		name = ProgramActive
		type = ProgramActive
		program = SuborbRocketDev
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = KarmanLine
	}

	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		tag = exclude_SoundingRocket
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		tag = exclude_SoundingDownrange
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = Below the difficulty cap
		expression = ($RP0_DistanceDifficulty + 0) < @RP0:maxDistanceDifficultyLevels
	}

	BEHAVIOUR
	{
		name = SetDistanceDifficulty
		type = Expression

		CONTRACT_OFFERED
		{
			RP0_DistanceDifficulty = $RP0_DistanceDifficulty + 0
			RP0_DistanceDifficulty = Max(1, $RP0_DistanceDifficulty)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			RP0_DistanceDifficulty = $RP0_DistanceDifficulty + 1
		}
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			SRD_Completion = ($SRD_Completion + 0) == 0 ? (UniversalTime() - @RP0:expectedDays_DistanceSounding * 86400) : ($SRD_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			SRD_Completion = UniversalTime()
		}
	}

	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Reach @/missionDistance.Print() km downrange with @/missionPayload.Print() units of Sounding Payload.

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a new vessel
			hideChildren = true
		}

		PARAMETER
		{
			name = BuiltAtVAB
			type = VesselBuiltAt
			builtAt = VAB
		}

		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}

		PARAMETER
		{
			name = HasSoundingPayload
			type = HasResource
			resource = SoundingPayload
			minQuantity = @/missionPayload - 0.1
			title = Have a SoundingPayload of at least @/missionPayload.Print() units on the craft
			hideChildren = true
		}

		PARAMETER
		{
			name = HaveAvionics
			type = VesselParameterGroup
			title = Maintain sufficient avionics for the first 50s of flight (do not lose control)
			disableOnStateChange = true
			hideChildren = true

			PARAMETER
			{
				name = AvionicsCheck
				type = AvionicsCheck
				continuousControlRequired = true
				hideChildren = true
			}

			PARAMETER
			{
				name = ReachState
				type = ReachState
				situation = FLYING
				minRateOfClimb = 10
				hideChildren = true
			}

			PARAMETER
			{
				name = Duration
				type = Duration
				duration = 50s
				completeInSequence = true
				hideChildren = true
			}
		}

		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			minAltitude = 140000
			disableOnStateChange = true
			title = Reach an altitude of at least 140 km
			hideChildren = true
		}

		PARAMETER
		{
			name = ReachDistance
			type = DownrangeDistance
			distance = @/missionDistanceMeters
			title = Reach a downrange distance of at least @/missionDistance.Print() km
		}
	}
}
