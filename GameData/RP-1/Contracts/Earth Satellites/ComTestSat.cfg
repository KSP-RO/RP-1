CONTRACT_TYPE
{
	name = ComTestSat
	title = Communications Test Satellite
	group = TargetedSats

	tag = exclude_RepeatableComSat

	description = <b>Program: Targeted Satellites</b> or <b>Comm Network<br>Type: <color=blue>Optional</color></b><br><br>There are groups that want to understand more about communications with satellites. Launch a new communications test satellite into the proper orbit. &br;&br;<b><color=yellow>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b>&br;&br;<b><color=white>Removal Condition: Completion of a Communications Satellite (Early) contract</color></b>&br;&br;<b>The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @RP0:expectedDays_ComTestSat<br>Number of Contracts Completed: @index / unlimited</b>
	genericDescription = Put a satellite with the required amount of communications satellite payload into the desired orbit.
	synopsis = Launch a Communications Test Satellite

	completedMessage = Success! We are learning more about space communications with every launch.

	sortKey = 513

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = 0

	targetBody = HomeWorld()


	// ************ REWARDS ************
	prestige = Trivial       // 1.0x
	advanceFunds = 0
	rewardFunds = 0
	rewardScience = 0
	rewardReputation = Round(55 * Pow(@TestComSat/Orbit/minApA / 6000000, 0.5) * Pow((@TestComSat/HasComSatPayload/minQuantity / 325), 0.5) * @rewardFactor, 1)
	failureReputation = 0 // was @rewardReputation
	failureFunds = 0

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = Any
		type = Any
	
		REQUIREMENT
		{
			name = ProgramActive
			type = ProgramActive
			program = TargetedSats
		}
		
		REQUIREMENT
		{
			name = ProgramActive
			type = ProgramActive
			program = CommNetwork
		}
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstComSat
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		tag = exclude_SoundingRocket
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		tag = exclude_SoundingDownrange
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		tag = exclude_RepeatableComSat
		invertRequirement = true
	}

	DATA
	{
		type = int
		index = $ComTestSat_Count + 0
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			RepeatSat_Completion = ($RepeatSat_Completion + 0) == 0 ? (UniversalTime() - @RP0:expectedDays_ComTestSat * 86400) : ($RepeatSat_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			ComTestSat_Count = $ComTestSat_Count + 1
			RepeatSat_Completion = UniversalTime()
		}
	}

	DATA
	{
		type = int
		antiGrindCompletion = $RepeatSat_Completion == 0 ? (UniversalTime() - @RP0:expectedDays_ComTestSat * 86400) : $RepeatSat_Completion
	}

	DATA
	{
		type = float

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @RP0:expectedDays_ComTestSat * 20 - 9, 1), 2) / 3.46
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	DATA
	{
		type = float
		payload = Round(Random(80,140),1)
	}

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = TestComSat
		type = VesselParameterGroup
		define = TestComSatellite
		title = Communications test satellite

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a new vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
		{
			name = HasComSatPayload
			type = HasResource
			resource = ComSatPayload
			minQuantity = @/payload-0.1
			title = Have a ComSatPayload of at least @/payload units on the craft
			hideChildren = true
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minInclination = Round(Random(30, 50))
			minPeA = Round(Random(700000, 1000000), 1000)
			minApA = Round(Random(4000000, 5000000), 1000)
			maxApA = Round(Random(7000000, 9000000), 1000)
			disableOnStateChange = true
			title = Achieve orbit within the parameters

			PARAMETER
			{
				name = Duration
				type = Duration

				duration = 2m

				preWaitText = Check for stable orbit
				waitingText = Checking for stable orbit
				completionText = Stable orbit: Confirmed
			}
		}
	}

	BEHAVIOUR
	{
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = TestComSatellite
	}

	BEHAVIOUR
	{
		name = VesselDestroyed
		type = DialogBox
		DIALOG_BOX
		{
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5
			TEXT
			{
				text = The contract has been completed successfully and the satellite has been transferred back to the customer.
			}
		}
	}
}
