CONTRACT_TYPE:NEEDS[TACLifeSupport|Kerbalism]
{
	name = ResupplyLEOStation
	title = Resupply the Life Support Resources on @/targetVessel1
	genericTitle = Resupply the Life Support Resources on your LEO Space Station
	group = SpaceStations
	agent = Stations

	description = We need to keep the consumables in our station always at safe levels, so sending resupply missions periodically is always useful; This contract is requiring you to bring enough Food, Water and Oxygen to last for 4 months considering the current @/targetVessel1.CrewCount() crew onboard. You can bring more if you plan on expanding crew, and don't forget to bring the other resources you may need for your generators.&br;The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of it's nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays</b> 
	genericDescription = Send enough Food, Water and Oxygen to your LEO Space Station to keep the current crew supplied for 4 months.

	synopsis = Send a mission to resupply the Life Support Resources on @/targetVessel1

	completedMessage = Mission Success! You have resupplied @/targetVessel1 with enough Life Support for now. Be sure to monitor your stations to keep them in supply.

	sortKey = 1507

	deadline = 180 * RP1DeadlineMult()
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1
	
	targetBody = HomeWorld()
	
	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial

	// reward block
	advanceFunds = Round((5000 * (4 + @/targetVessel1.CrewCount()) * @RP0:globalHardContractMultiplier * @rewardFactor), 100)
	rewardFunds = @advanceFunds * 1.2
	failureFunds = @advanceFunds * 0.5

	DATA
	{
		type = int
		antiGrindCompletion = $StRsp_Completion == 0 ? (UniversalTime() - @expectedDays * 86400) : $StRsp_Completion
	}

	DATA
	{
		type = float
		expectedDays = 120

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 6 - 0.5, 1), 2) / 2.4594
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = first_spaceStation
	}

	DATA
	{
		type = Vessel
		requiredValue = true
		uniquenessCheck = CONTRACT_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CelestialBody() == @targetBody && v.FreeDockingPorts()>0 && v.CrewCount()>0).SelectUnique()
		title = Must have an open Docking Port and some crew in the station
	}
	DATA
	{
		type = float
		foodReq = Round(@/targetVessel1.CrewCount() * 5.84928 * 120, 10)
		waterReq = Round(@/targetVessel1.CrewCount() * 3.87072 * 120, 10)
		oxygenReq = Round(@/targetVessel1.CrewCount() * 591.84 * 120, 1000)
		title = Get Life Support requirement for four months with the current crew
	}
	
	
	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		
		CONTRACT_OFFERED
		{
			StRsp_Completion = ($StRsp_Completion + 0) == 0 ? (UniversalTime() - 120 * 86400) : ($StRsp_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			StRsp_Completion = UniversalTime()
		}
	}

	PARAMETER
	{
		name = ResupplyLS
		type = VesselParameterGroup
		title = Increase the Life Support Resources on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}

		PARAMETER
		{
			name = AllResources
			type = All
			title = Have at least 1 Docking Port and bring at least @/foodReq Food, @/waterReq Water, and @/oxygenReq Oxygen to refill your station.
			notes = This is the amount of Resources that would keep the current crew for 6 months

			PARAMETER
			{
				name = DockingPort
				type = PartValidation
				partModule = ModuleDockingNode
				minCount = 1
				title = Have at least 1 Docking Ports
				hideChildren = true
			}
			PARAMETER
			{
				name = LifeSupportResupply
				type = HasResource
				resource = Food
				minQuantity = @/foodReq
				hideChildren = true
			}
			PARAMETER
			{
				name = LifeSupportResupply
				type = HasResource
				resource = Water
				minQuantity = @/waterReq
				hideChildren = true
			}
			PARAMETER
			{
				name = LifeSupportResupply
				type = HasResource
				resource = Oxygen
				minQuantity = @/oxygenReq
				hideChildren = true
			}
		}
	}

	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = true
	}
}
