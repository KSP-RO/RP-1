CONTRACT_TYPE
{
	name = CrewRotationLEOStation
	title = Rotate the Crew of @/targetVessel1
	genericTitle = Rotate the Crew of Your Space Station

	group = SpaceStations
	agent = Stations

	description = Our crew has been up on our @/targetVessel1 Station for a extended stay. We want to continue our research, but need to bring some crew home. Send at least @/crewRot new crew to your Space Station and bring at least @/crewRot of the existing crew home.&br;The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of it's nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays</b>
	genericDescription = Send a new crew to your Space Station and bring at least half of the existing crew home.

	synopsis = Rotate the Crew of @/targetVessel1

	completedMessage = Mission Success! Our new crew has settled into the station and will continue our research and the old crew has returned home safely.

	sortKey = 1503

	deadline = 180 * RP1DeadlineMult()
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1
	
	targetBody = HomeWorld()
	
	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial

	// reward block
	advanceFunds = Round((10000 * (4 + @/crewRot) * @RP0:globalHardContractMultiplier * @rewardFactor), 100)
	rewardFunds = @advanceFunds * 1.2
	failureFunds = @advanceFunds * 0.5

	DATA
	{
		type = int
		antiGrindCompletion = $StRot_Completion == 0 ? (UniversalTime() - @expectedDays * 86400) : $StRot_Completion
	}

	DATA
	{
		type = float
		expectedDays = 180

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 6 - 0.5, 1), 2) / 2.4594
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}
	
	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = first_spaceStation
	}

	// ************ DATA ************

	DATA
	{
		type = Vessel
		uniquenessCheck = CONTRACT_ACTIVE
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CelestialBody() == @targetBody && v.FreeDockingPorts()>0 && v.CrewCount()>0).SelectUnique()
		title = Must have an open Docking Port and some crew in the station
	}
	
	DATA
	{
		type = float
        crewRot = Round(@/targetVessel1.CrewCount() / 2, 1)
		title = Get amount of crew to be rotated
	}
	
		BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		
		CONTRACT_OFFERED
		{
			StRot_Completion = ($StRot_Completion + 0) == 0 ? (UniversalTime() - 180 * 86400) : ($StRot_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			StRot_Completion = UniversalTime()
		}
	}

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = SSCrewRotation
		type = VesselParameterGroup
		title = Send up a New Crew to @/targetVessel1
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}

		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = @/crewRot
			title = Have at least @/crewRot crewmembers on board
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
	}

	PARAMETER
	{
		name = SSCrewReturn
		type = VesselParameterGroup
		title = Bring the crew home!

		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = @/crewRot
			title = Have at least @/crewRot crewmembers on board
			hideChildren = true
			disableOnStateChange = true
		}	

		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Crew Home Safely
			hideChildren = true
			completeInSequence = true
		}
	}
}
