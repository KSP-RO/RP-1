@PART[ROT-AtlasDecoupler|ROT-OpenInterstage|ROT-RingDecoupler]:FOR[RP-0]
{
	@cost = 1
	@MODULE[ModuleROTank]
	{
		%usePFStyleMass = true
		%pfCostPerTonBase = 500 // base cost below: 100 * 5 for base cost decoupler mult
		%pfCostPerTonSide = 100 // fairing side cost below: 100 for fairings with no decoupler
	}
}

// Proc Fairings
// Adapters without decoupler cost 20%

// ProcFairings v6.0+ for KSP 1.8+ deprecates both ProceduralFairingAdapter and KzFairingBaseResizer
// Everything is contained in the ProceduralFairingBase, with a mode KSPField
// PF v6.0 also adds decoupler mass and cost adders/multipliers.  RO will cover the mass multipliers.

@PART:HAS[@MODULE[ProceduralFairingBase]:HAS[#mode]]:FOR[RP-0]
{
	@cost = 1
	@MODULE[ProceduralFairingBase]:HAS[#mode[Payload]]
	{
		@costPerTonne = 80
		%decouplerCostMult = 5              // Mult to costPerTonne when decoupler is enabled
		%decouplerCostBase = 0              // Flat additional cost when decoupler is enabled
	}
	@MODULE[ProceduralFairingBase]:HAS[#mode[Adapter]]
	{
		@costPerTonne = 100
		%decouplerCostMult = 5              // Mult to costPerTonne when decoupler is enabled
		%decouplerCostBase = 0              // Flat additional cost when decoupler is enabled
	}
	@MODULE[ProceduralFairingBase]:HAS[#mode[Plate]]
	{
		@costPerTonne = 50
	}
}
@PART:HAS[@MODULE[ProceduralFairingBase]:HAS[#mode[Plate]]]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleToolingGeneric
		toolingName = Tool Thrust Structure
		toolingType = StructuralBase
		untooledMultiplier = 0.125
		finalToolingCostMultiplier = 0.08
		
		partModuleName = ProceduralFairingBase
		diamField = baseSize
		useLength = false
	}
}

@PART:HAS[@MODULE[ProceduralFairingSide]]:FOR[RP-0]
{
	%RP0conf = true
	@cost = 1
	@TechRequired = start
	@MODULE[ProceduralFairingSide]
	{
		%costPerTonne = 100
		%decouplerCostMult = 8              // Mult to costPerTonne when decoupler is enabled
		%hingeCostMult = 6					// Mult to costPerTonne when petal hinge is enabled
	}
	MODULE
	{
		// Procedural fairings mod ver 1.4.3.1 added a toggle for enabling/disabling the decouplers on fairings.
		// Decoupleable fairings are considered to be payload fairings and non-decoupleable ones are interstage fairings.
		// Interstage and payload fairings have different costs and tooling.
		name = ModuleToolingPFSide
		toolingName = Tool Fairings
		toolingType = PayloadFairing
		toolingTypeNonDecoupled = Stringers
		toolingTypeHinged = HingedFairing
		untooledMultiplier = 0.125
		untooledMultiplierHinged = 0.0875
		untooledMultiplierNonDecoupled = 0.0625
		finalToolingCostMultiplier = 0.35
		finalToolingCostMultiplierHinged = 0.25
		finalToolingCostMultiplierNonDecoupled = 0.0625
	}
}

// Proc Parts
@PART[*]:FOR[RP-0]
{
	@MODULE[ProceduralPart]
	{
		%costPerkL = 0
	}
}

@PART[proceduralStructural|proceduralNoseCone]:FOR[RP-0]
{
	@MODULE[ProceduralPart]
	{
		%costPerkL = 0.5
	}
}
@PART[proceduralStructural|proceduralNoseCone|ROT-ModularCargoBay]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleToolingPTank
		toolingName = Tool Stringers
		toolingType = Stringers
		untooledMultiplier = 0.0625
		finalToolingCostMultiplier = 0.0625
		
		costMultiplierDL = 3.5
	}
}
@PART[proceduralStackDecoupler]:FOR[RP-0]
{
	@MODULE[ProceduralPart]
	{
		%costPerkL = 500
	}
}

@PART[proceduralBattery]:FOR[RP-0]
{
	@MODULE[ProceduralPart]
	{
		%costPerkL = 2050
	}
	@MODULE[TankContentSwitcher]
	{
		@TANK_TYPE_OPTION[Electric]
		{
			@dryDensity = 1.44
			@RESOURCE[ElectricCharge]
			{
				@unitsPerT = 150000
			}
		}
	}
	MODULE
	{
		name = ModuleToolingPTank
		toolingName = Tool Battery
		toolingType = Battery
		untooledMultiplier = 0.1
		finalToolingCostMultiplier = 1
	}
}
@PART[proceduralCrewTube]:FOR[RP-0]
{
	@MODULE[ProceduralPart]
	{
		%costPerkL = 24.5
	}
	MODULE
	{
		name = ModuleToolingPTank
		toolingName = Tool Crew Tube
		toolingType = CrewTube
		untooledMultiplier = 0.1
		finalToolingCostMultiplier = 3
	}
}

// Real Fuels
@PART[*]:HAS[@MODULE[ModuleFuelTanks]:HAS[~basemass[]]]:BEFORE[RP-0]
{
	@cost = 1 // autocalc cost
}
// shielded tank
@PART[RO-ProcTankSpaceplane]:FOR[RP-0]
{
	@MODULE[ProceduralPart]
	{
		%costPerkL = 40
	}
}
// tank type costs
// set base cost
@MFSSETTINGS[MFSSettings]:FOR[RP-0]
{
	%baseCostPV = 0.006
}
// nominal cost, same as default
@TANK_DEFINITION[Default]:FOR[RP-0]
{
	%baseCost = 0.004 * volume
}
// a bit more
@TANK_DEFINITION[Cryogenic|Fuselage]:FOR[RP-0]
{
	%baseCost = 0.01 * volume
}
// this costs less
@TANK_DEFINITION[Structural]:FOR[RP-0]
{
	%baseCost = 0.002 * volume
}
// these cost more:
@TANK_DEFINITION[Balloon|ElectricPropulsion]:FOR[RP-0]
{
	%baseCost = 0.01 * volume
}
@TANK_DEFINITION[ServiceModule]:FOR[RP-0]
{
	%baseCost = 0.015 * volume
}
@TANK_DEFINITION[BalloonCryo]:FOR[RP-0]
{
	%baseCost = 0.015 * volume
}

// RO tank types ***************************
// Conventional
// Note: due to utilization differences between HP and regular, these numbers aren't exactly what they were.
@TANK_DEFINITION[Tank-Sep-Steel|Tank-Sep-Steel-HP]:FOR[RP-0]
{
	%baseCost = 0.002 * volume
}
@TANK_DEFINITION[Tank-Sep-Al|Tank-Sep-Al-HP]:FOR[RP-0]
{
	%baseCost = 0.0022 * volume
}
@TANK_DEFINITION[Tank-Sep-Al2|Tank-Sep-Al2-HP]:FOR[RP-0]
{
	%baseCost = 0.0025 * volume
}
@TANK_DEFINITION[Tank-Sep-AlCu|Tank-Sep-AlCu-HP]:FOR[RP-0]
{
	%baseCost = 0.003 * volume
}
@TANK_DEFINITION[Tank-Sep-AlLi|Tank-Sep-AlLi-HP]:FOR[RP-0]
{
	%baseCost = 0.0045 * volume
}
@TANK_DEFINITION[Tank-Sep-Stir|Tank-Sep-Stir-HP]:FOR[RP-0]
{
	%baseCost = 0.004 * volume
}
@TANK_DEFINITION[Tank-Sep-Starship|Tank-Sep-Starship-HP]:FOR[RP-0]
{
	%baseCost = 0.0018 * volume
}

// Isogrids
@TANK_DEFINITION[Tank-Iso-Al|Tank-Iso-Al-HP]:FOR[RP-0]
{
	%baseCost = 0.0042 * volume
}
@TANK_DEFINITION[Tank-Iso-AlCu|Tank-Iso-AlCu-HP]:FOR[RP-0]
{
	%baseCost = 0.005 * volume
}
@TANK_DEFINITION[Tank-Iso-AlLi|Tank-Iso-AlLi-HP]:FOR[RP-0]
{
	%baseCost = 0.0065 * volume
}
@TANK_DEFINITION[Tank-Iso-Comp|Tank-Iso-Comp-HP]:FOR[RP-0]
{
	%baseCost = 0.008 * volume
}
@TANK_DEFINITION[Tank-Iso-Magic|Tank-Iso-Magic-HP]:FOR[RP-0]
{
	%baseCost = 0.01 * volume
}

// Balloon
@TANK_DEFINITION[Tank-Balloon-SteelAl]:FOR[RP-0]
{
	%baseCost = 0.008 * volume
}
@TANK_DEFINITION[Tank-Balloon-SteelAlCu]:FOR[RP-0]
{
	%baseCost = 0.008 * volume
}
@TANK_DEFINITION[Tank-Balloon-SteelAlLi]:FOR[RP-0]
{
	%baseCost = 0.007 * volume
}

// SM
@TANK_DEFINITION[SM-I]:FOR[RP-0]
{
	%baseCost = 0.008 * volume
}
@TANK_DEFINITION[SM-II]:FOR[RP-0]
{
	%baseCost = 0.01 * volume
}
@TANK_DEFINITION[SM-III]:FOR[RP-0]
{
	%baseCost = 0.012 * volume
}
@TANK_DEFINITION[SM-IV]:FOR[RP-0]
{
	%baseCost = 0.016 * volume
}

// Take 0.0024 f / L cost from the TANK and add it to the baseCost
// (using utilization because it's not always 100%)
@TANK_DEFINITION[Tank-Sep*|Tank-Iso*|Tank-Balloon*|SM-*]:HAS[#baseCost[*volume],#maxUtilization[*]]:FOR[RP-0]
{
	// The search takes regexp format
	@baseCost ^=: \* volume::
	costAdd = #$maxUtilization$
	@costAdd /= 100
	@costAdd *= 0.0024
	@baseCost += #$costAdd$
	// but the replace doesn't??
	@baseCost ^=:$: * volume:
	!costAdd = DEL
}

@TANK_DEFINITION[*]:FOR[RP-0]
{
	@TANK[Aerozine50] { %cost = 0.0072 }
	@TANK[CooledAerozine50] { %cost = 0.0202 }
	@TANK[AK20] { %cost = 0.0025 }
	@TANK[AK27] { %cost = 0.0025 }
	@TANK[Ammonia] { %cost = 0.0009 }
	@TANK[LqdAmmonia] { %cost = 0.0025 }
	@TANK[Aniline] { %cost = 0.0009 }
	@TANK[ANFA22] { %cost = 0.0009 }
	@TANK[ANFA37] { %cost = 0.0009 }
	// ArgonGas
	// ASCENT
	// AvGas
	// CarbonDioxide
	@TANK[CaveaB] { %cost = 0.0072 }
	@TANK[ClF3] { %cost = 0.0326 }
	@TANK[ClF5] { %cost = 0.0326 }
	// CoreModerator
	@TANK[Diborane] { %cost = 0.0683 }
	@TANK[Ethane] { %cost = 0.0046 }
	// Ethanol75
	// Ethanol90
	// Ethanol
	@TANK[Ethylene] { %cost = 0.0131 }
	@TANK[FLOX30] { %cost = 0.0085 }
	@TANK[FLOX70] { %cost = 0.0283 }
	@TANK[FLOX88] { %cost = 0.0326 }
	@TANK[Fluorine] { %cost = 0.0202 }
	@TANK[LqdFluorine] { %cost = 0.0326 }
	@TANK[Furfuryl] { %cost = 0.0025 }
	// Helium
	@TANK[LqdHelium] { %cost = 0.0101 }
	@TANK[HTP] { %cost = 0.0046 }
	@TANK[Hydrazine] { %cost = 0.0131 }
	@TANK[Hydrogen] { %cost = 0.0003 }
	@TANK[LqdHydrogen] { %cost = 0.0126 }
	@TANK[Hydyne] { %cost = 0.0046 }
	@TANK[IRFNA-III] { %cost = 0.0025 }
	@TANK[IRFNA-IV] { %cost = 0.0025 }
	@TANK[IWFNA] { %cost = 0.0025 }
	// Kerosene
	@TANK[CooledKerosene] { %cost = 0.0009 }
	// KryptonGas
	// LithiumHydroxide
	@TANK[LithiumPeroxide] { %cost = 0.0025 }
	@TANK[Methane] { %cost = 0.0046 }
	@TANK[LqdMethane] { %cost = 0.0072 }
	@TANK[Methanol] { %cost = 0.0003 }
	@TANK[MMH] { %cost = 0.0072 }
	@TANK[MHF3] { %cost = 0.0326 }
	@TANK[MON1] { %cost = 0.0003 }
	@TANK[MON3] { %cost = 0.0003 }
	@TANK[MON10] { %cost = 0.0025 }
	@TANK[MON15] { %cost = 0.0025 }
	@TANK[MON20] { %cost = 0.0025 }
	@TANK[MON25] { %cost = 0.0025 }
	@TANK[N2F4] { %cost = 0.0009 }
	// Nitrogen
	// LqdNitrogen
	// NitrousOxide
	@TANK[NTO] { %cost = 0.0003 }
	@TANK[CooledNTO] { %cost = 0.0025 }
	@TANK[OF2] { %cost = 0.0131 }
	// Oxygen
	// LqdOxygen
	@TANK[CooledLqdOxygen] { %cost = 0.0003 }
	@TANK[Pentaborane] { %cost = 0.0955 }
	@TANK[PB-1] { %cost = 0.0955 }
	@TANK[PotassiumSuperoxide] { %cost = 0.0072 }
	// RG-1
	@TANK[CooledRG-1] { %cost = 0.0009 }
	// RP-1
	@TANK[CooledRP-1] { %cost = 0.0009 }
	// Syntin
	@TANK[CooledSyntin] { %cost = 0.0009 }
	@TANK[Tonka250] { %cost = 0.0025 }
	@TANK[Turpentine] { %cost = 0.0003 }
	@TANK[UDMH] { %cost = 0.0072 }
	@TANK[UH25] { %cost = 0.0072 }
	// Water
	// XenonGas
	@TANK,*:HAS[~cost[]]
	{
		cost = 0.0001
	}
}

@TANK_DEFINITION[ServiceModule|ElectricPropulsion]:FOR[RP-0]
{
	@TANK[ElectricCharge]
	{
		%cost = 5 // ~$18,000 per kWh (5 per MJ)
	}
}
// More expensive in early / plane tanks
@TANK_DEFINITION[Fuselage]:FOR[RP-0]
{
	@TANK[ElectricCharge]
	{
		%cost = 10 // ~$36,000 per kWh (10 per MJ)
	}
}

// Catch parts that contain RF tanks but are priced in the tree
@PART[*]:HAS[@MODULE[ModuleFuelTanks]:HAS[#basemass[-1]],#RP0conf[true],~TechRequired[ORPHANS]]:AFTER[xxxRP0]
{
	@MODULE[ModuleFuelTanks]
	{
		%baseCost = -1
	}
}

// Pwings
@PART[*]:HAS[@MODULE[WingManipulator]]:FOR[RP-0]
{
	@MODULE[WingManipulator]
	{
		%costDensity = 530
		%costDensityControl = 650
	}
}
// B9 pWings
@PART[*]:HAS[@MODULE[WingProcedural]]:FOR[RP-0]
{
	@MODULE[WingProcedural]
	{
		%aeroConstCostDensity = 320
		%aeroConstCostDensityControl = 540
	}
}
// New supersonic wings
@PART[RO-B9ProcWing-Supersonic|RO-B9ProcCS-Supersonic|RO-B9ProcAMWing-Supersonic]:FOR[RP-0]
{
	@MODULE[WingProcedural]
	{
		%aeroConstCostDensity = 160
		%aeroConstCostDensityControl = 270
	}
}
// New early wings
@PART[RO-B9ProcWing-Early|RO-B9ProcCS-Early|RO-B9ProcAMWing-Early]:FOR[RP-0]
{
	@MODULE[WingProcedural]
	{
		%aeroConstCostDensity = 50
		%aeroConstCostDensityControl = 85
	}
}

// RealChute
@PART[*]:HAS[@MODULE[ProceduralChute],~RSSROConfig[]]:FOR[RP-0]
{
	@MODULE[ProceduralChute]
	{
		@SIZE,*
		{
			@cost *= 0.001
			@caseMass *= 0.1
		}
	}
}
@PART[RC_radial]:FOR[RP-0]
{
	@MODULE[ProceduralChute]
	{
		@SIZE,*
		{
			@cost *= 0.001
			@caseMass *= 0.1
		}
	}
}
@MATERIAL[Silk]:FOR[RP-0]
{
	@areaCost = 0.1
}
@MATERIAL[Nylon]:FOR[RP-0]
{
	@areaCost = 0.2
}
@MATERIAL[Kevlar]:FOR[RP-0]
{
	@areaCost = 0.3
}

// SSTU procedural decoupler
@PART[SSTU-SC-GEN-PDC]:FOR[zzzRP-0]
{
	@MODULE[SSTUProceduralDecoupler]
	{
		@massPerCubicMeter = 0.5
		@costPerCubicMeter = 800
	}
}
