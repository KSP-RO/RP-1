CONTRACT_TYPE
{
	name = DownrangeIntermediate
	group = SoundingRockets

	title = Downrange Distance LV Development (Intermediate)

	description = Design, build and launch a rocket with @/missionPayload.Print() units of Sounding Rocket Payload to a downrange distance of @/missionDistance.Print() km. For best results, place the sounding payload into a high pressure steel or aluminum tank using the Tank UI in the PAW. <b><color="white">Your rocket must be suborbital (over 140 km) for the contract to be completed. Additionally at least the first 50 seconds of the flight must be done under active guidance (using Near-Earth avionics).</color></b> Perfecting this is part of Launch Vehicle development to utilize a gravity turn and tune your ascent profile and angle of attack. The current distance that your rocket has traveled can be seen in the contract parameters screen. It will update in real time. A better option is to use the MechJeb information called Downrange Distance. It can be added to any window using the Custom Window Editor and is found in the Flight Recorder section.&br;&br;<b><color="green">NOTE: The distance that you see provided by KSP in the F3 screen is not accurate, so please do not base your attempts off of it.</color></b>&br;The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays</b>&br;&br;<b><color="red">This contract will no longer be offered once you complete the First Orbit contract!</color></b>

	genericDescription = Deliver a new payload to a specified downrange distance. This contract is within your capabilities.

	synopsis = Launch a rocket with @/missionPayload.Print() units of Sounding Rocket Payload to a downrange distance of @/missionDistance.Print() km.

	completedMessage = Congratulations on a successful launch!

	deadline = 365 * RP1DeadlineMult()
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1

	targetBody = HomeWorld()

	maxCompletions = 0
	maxSimultaneous = 1
	prestige = Trivial

	// reward block
	advanceFunds = Round(@currentPayment / 2 * @RP0:globalHardContractMultiplier * @rewardFactor * @noPlaneFundMult, 100)
	rewardFunds = @advanceFunds * 1.2
	failureFunds = @advanceFunds * 0.5

	DATA
	{
		type = float
		noPlaneFundMult = RP1YesPlanes() ? 1 : @RP0:noPlaneFundMult
	}

	DATA
	{
		type = int
		antiGrindCompletion = $SRD_Completion == 0 ? (UniversalTime() - @expectedDays * 86400) : $SRD_Completion
	}

	DATA
	{
		type = float
		expectedDays = 90

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 3 - 0.05, 1), 2) / 1.5607
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	// The global modifiers for all sounding rockets are stored in the main Groups.cfg file in the root Contracts folder
	DATA
	{
		// We want to set this to lag 1 level behind the current difficulty level
		title = Sets the current difficulty level based on the completed mission increment
		type = float
		soundingDifficultyIndex = $RP0_DistanceDifficulty
		soundingDifficultyLevel = Min(Max(@soundingDifficultyIndex, 1), @RP0:maxDistanceDifficultyLevels)
	}

	DATA
	{
		title = These are the payouts for each of the difficulty levels
		type = float
		currentPayment = @RP0:distanceBasePayment + ((@soundingDifficultyLevel - 1) * @RP0:distancePaymentPerLvl)
	}

	DATA
	{
		title = These are the minimum and maximum payloads for each of the difficulty levels
		type = float
		currentMinPayload = @RP0:distanceBaseMinPayload + (@soundingDifficultyLevel - 1) * @RP0:distanceMinPayloadPerLvl
		currentMaxPayload = Min(@RP0:payloadMax, @RP0:distanceBaseMaxPayload + ((@soundingDifficultyLevel - 1) * @RP0:distanceMaxPayloadPerLvl))
	}

	DATA
	{
		title = Generate the actual payload for this specific mission
		type = float
		totalPayload = Round(Random(@currentMinPayload, @currentMaxPayload), 5)
	}

	DATA
	{
		title = Payload Rounded Off
		type = int
		missionPayload = int(@totalPayload)
	}

	DATA
	{
		title = Generate the actual payment amount for this specific mission
		type = float
		calcPayout = @currentPayment / @RP0:globalHardContractMultiplier
	}

	DATA
	{
		title = Calculate the distance for this mission
		type = float
		calcDistance = (@calcPayout - @RP0:distanceBaseLaunchValue) / (@RP0:distanceMod * (Pow(@totalPayload / @RP0:payloadDivisor, @RP0:distancePayloadExponent) + @RP0:payloadAdder))
	}

	DATA
	{
		title = Generate the actual distance for this specific mission
		type = int
		missionDistance = int(Round(@calcDistance, 10))
		missionDistanceMeters = @missionDistance * 1000
	}

	REQUIREMENT
	{
		name = All of the below most be completed
		type = All

		REQUIREMENT
		{
			name = AltitudeRecord100k // Karman line
			type = AltitudeRecord
			minAltitude = 100000
			title = Must have reached 100 km
		}

		REQUIREMENT
		{
			name = CompleteOrbit
			type = CompleteContract
			contractType = first_OrbitUncrewed
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketDifficult
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketIntermediate
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = DownrangeDifficult
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketBio
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketAdvancedBio
			invertRequirement = true
		}

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			contractType = SoundingRocketFilm
			invertRequirement = true
		}
	}

	BEHAVIOUR
	{
		name = SetDistanceDifficulty
		type = Expression

		CONTRACT_OFFERED
		{
			RP0_DistanceDifficulty = $RP0_DistanceDifficulty + 0
			RP0_DistanceDifficulty = Max(1, $RP0_DistanceDifficulty)
		}
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			SRD_Completion = ($SRD_Completion + 0) == 0 ? (UniversalTime() - 90 * 86400) : ($SRD_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			SRD_Completion = UniversalTime()
		}
	}

	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup

		title = Reach @/missionDistance.Print() km downrange with @/missionPayload.Print() units of Sounding payload.

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}

		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}

		PARAMETER
		{
			name = HasSoundingPayload
			type = HasResource
			resource = SoundingPayload
			minQuantity = @/missionPayload - 0.01
			title = Have a SoundingPayload of at least @/missionPayload.Print() units on the craft
			hideChildren = true
		}

		PARAMETER
		{
			name = HaveAvionics
			type = VesselParameterGroup
			title = Maintain sufficient avionics for the first 50s of flight (do not lose control)
			disableOnStateChange = true
			hideChildren = true

			PARAMETER
			{
				name = AvionicsCheck
				type = AvionicsCheck
				continuousControlRequired = true
				hideChildren = true
			}

			PARAMETER
			{
				name = ReachState
				type = ReachState
				situation = FLYING
				minRateOfClimb = 10
				hideChildren = true
			}

			PARAMETER
			{
				name = Duration
				type = Duration
				duration = 50s
				completeInSequence = true
				hideChildren = true
			}
		}

		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			minAltitude = 140000
			disableOnStateChange = true
			title = Reach an altitude of at least 140 km
			hideChildren = true
		}

		PARAMETER
		{
			name = ReachDistance
			type = DownrangeDistance
			distance = @/missionDistanceMeters
			title = Reach a downrange distance of at least @/missionDistance.Print() km
		}
	}
}
