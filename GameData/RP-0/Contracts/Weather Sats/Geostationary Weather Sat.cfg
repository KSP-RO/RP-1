CONTRACT_TYPE
{
	name = GEOWeather
	title = Geostationary Weather Satellite
	group = WeatherSats

	description = Geostationary satellites provide the best views of the clouds in specific areas for our meteorologists. Place a weather satellite in geostationary orbit near the marked area.&br;&br;<b><color=red>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b>&br;&br;<b>Number of Contracts Completed: $GEOWeather_Count</b>
	genericDescription = Put a satellite into the requested orbit.

	synopsis = Launch a geostationary weather satellite to the marked area

	completedMessage = Success! By placing the weather satellite in a geostationary orbit, we can see the movement and formations of the clouds.

	sortKey = 503

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 0
	maxExpiry = 0
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = 365 * RP1DeadlineMult()  // 1 year

	targetBody = HomeWorld()

	prestige = Significant   // 1.25x
	advanceFunds = (850 + (Pow(@GEOWeather/HasWeatherSatPayload/minQuantity, 0.45) * 75)) * 14.8 * @RP0:globalHardContractMultiplier
	rewardFunds = @advanceFunds * 1.5
	rewardScience = 0
	rewardReputation = 15
	failureReputation = 15
	failureFunds = @advanceFunds * 0.5

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SecondGenWeather
		minCount = 2
		title = Complete 'Second Generation Weather Satellite' contract at least @minCount times
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = first_GEOUncrewed
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			GEOWeather_Count = $GEOWeather_Count + 1
		}
	}

	DATA
	{
		type = double
		long = @/WaypointGenerator.Waypoints().ElementAt(0).Longitude()
	}

	DATA
	{
		type = double
		longMag = Max(@/long, -@/long)
	}

	DATA
	{
		type = int
		directionInt = int(Min(0, Max(-1, @/long * 1000000))+1)
	}

	DATA
	{
		type = List<string>
		directionList = ["° West", "° East"]
	}

	DATA
	{
		type = string
		direction = @/directionList.ElementAt(@/directionInt)
	}

	DATA
	{
		type = float
		payload = Round(Random(250,825),1)
	}
	
	// ************ PARAMETERS ************

	PARAMETER
	{
		name = GEOWeather
		type = VesselParameterGroup
		define = GEOWeatherSatellite
		dissassociateVesselsOnContractCompletion = true
		title = Geostationary Weather Satellite
		duration = 6h

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
		{
			name = HasWeatherSatPayload
			type = HasResource
			resource = WeatherSatPayload
			minQuantity = @/payload-0.01
			title = Have a WeatherSatPayload of at least @/payload units on the craft
			hideChildren = true
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			maxInclination = 2
			maxEccentricity = 0.01
			minPeriod = 23h 54m
			maxPeriod = 23h 58m
			disableOnStateChange = false
			title = Achieve a Geostationary orbit within the stated parameters near the waypoint
		}
		
		PARAMETER
		{
			name = VisitWaypoint
			type = VisitWaypoint
			index = 0
			//distance = 42736000
			horizontalDistance = 2000.0
			showMessages = true
			completeInSequence = true
			disableOnStateChange = false
			title = Location: @/longMag.ToString("N2")@/direction
		}
	}

	BEHAVIOUR
	{
		name = WaypointGenerator
		type = WaypointGenerator
		
		RANDOM_WAYPOINT
		{
			name = Geostationary Weather Satellite
			icon = thermometer
			altitude = 0
			forceEquatorial = true
		}
	}

	BEHAVIOUR
	{
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = GEOWeatherSatellite
	}

	BEHAVIOUR
	{
		name = VesselDestroyed
		type = DialogBox
		DIALOG_BOX
		{
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5
			TEXT
			{
				text = The contract has been completed successfully and the satellite has been transferred back to the customer.
			}
		}
	}
}
