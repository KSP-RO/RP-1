CONTRACT_TYPE
{
	name = supplyProtoStation
	title = Prototype Space Station Supply
	group = EarlyEarthSpaceStation
	agent = Stations

	description = <b>Program: Earth Space Station<br>Type: <color=blue>Optional</color></b><br><br>After successfully launching your first Space Station, it is now time to work on improvements. Control a Space Station, then send any needed crew and supplies so that it can continue its mission&br;&br;<b>Number of Phases Completed: @/index / @/maxCompletions</b>

	genericDescription = Rendezvous with a space station with the specified requirements in Earth orbit for crew rotation or resupply needs. 

	synopsis = Send supplies or crew to a station

	completedMessage = Congratulations! The station has been freshened up!

	sortKey = 1502

	cancellable = true
	declinable = false
	autoAccept = false
	minExpiry = 0
	maxExpiry = 0
	maxCompletions = 4
	maxSimultaneous = 1
	deadline = 0

	targetBody = HomeWorld()

	// ************ REWARDS ************
	
	prestige = Trivial       // 1.0x
	advanceFunds = 0
	rewardScience = 0
	rewardReputation = 300  // between 300 and 450 depending on supplies brought.
	rewardFunds =  0
	failureReputation = 0 // was @/rewardReputation
	failureFunds = 0

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = ProgramActive
		type = ProgramActive
		program = EarlyEarthSpaceStation
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = first_spaceStation
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = prototype_spaceStation_launch
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = CollectProtoStationScience
		invertRequirement = true
		
	}
	DATA
	{
		type = List<float>
		durationMultiplier = [1,1,1,2]
		experimentList = [0.3332,0.4998,0.6664,1]
	}
	DATA
	{
		type = float
		durationText = 30 * @/durationMultiplier.ElementAt(@/index)
	}
	DATA
	{
		type = float 
		experimentCompletion = @/experimentList.ElementAt(@/index)
	}
	DATA
	{
		type = List<int>
		crewList = [2,2,3,3]
	}
	DATA
	{
		type = int
		crewRequired = @/crewList.ElementAt(@/index)
		optionalRep = 50 // Reputation for bringing crew or supplies.
	}
	DATA
	{
		type = int
		index = $RepeatProtoSpaceStation_Count + 0
	}

	
	// ************ PARAMETERS ************
	
	PARAMETER
	{
		name = vesselGroupLaunch
		type = VesselParameterGroup
		title = Control a Space Station with the required parameters
		notes = The station must include at least 1 Docking Port and support for at least 3 Crew
		define = earlySpaceStation
		disableOnStateChange = true
		
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 3
			title = Space for at least 3 crew
			hideChildren = true
			disableOnStateChange = false
		}
		PARAMETER
		{
		    name = habitationExperiment //make sure the experiment is there to prevent the wrong vessel from grabbing the contract
		    type = PartValidation
		    FILTER
		    {
		        MODULE
		        {
		            name = ModuleScienceExperiment
		            experimentID = RP0longDurationHabit1
		        }
		    }
		    minCount = 1
		}	
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 docking port
			hideChildren = true
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = 250000
			maxApA = 500000
			targetBody = HomeWorld()
			title = Reach orbit with a perigee greater than 250 km and an apogee less than 500 km
			hideChildren = true
		}
	}
	PARAMETER
	{
		name = vesselGroupService
		type = VesselParameterGroup
		title = Send any needed supplies, modules, or crew to the station
		define = serviceVessel
		completeInSequence = true
		resetChildrenWhenVesselDestroyed = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a Supply Mission
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 docking port
			hideChildren = true
		}
		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous
			vessel = earlySpaceStation
			distance = 100
			title = Rendezvous with the station.
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = @/crewRequired
			title = OPTIONAL: Bring @/crewRequired fresh crewmembers to the station
			optional = true
			completeInSequence = true
			rewardReputation = @/optionalRep
			hideChildren = true
		}

		PARAMETER 
		{
			name = Samples
			type = HasResource
			resource = ResearchPayload
			minQuantity = 1000
			title = OPTIONAL: Bring 1 month of Research Payload
			optional = true
			completeInSequence = true
			rewardReputation = @/optionalRep
			hideChildren = true
		}
		PARAMETER
		{
			name = Docking
			type = Docking
			vessel = earlySpaceStation
			completeInSequence = true
			title = Dock with the station.
		}

	}
	PARAMETER
	{
		name = vesselGroupCrewReturn
		type = VesselParameterGroup
		title = Return the supply vessel home
		vessel = serviceVessel
		completeInSequence = true
		resetChildrenWhenVesselDestroyed = true
		
		PARAMETER
		{
			name = ReturnHome
			type = RP1ReturnHome
			title = Return home safely
			hideChildren = true
			completeInSequence = true
		}
	}
	PARAMETER
	{
		name = vesselGroupStationPersist
		type = VesselParameterGroup
		title = Keep the station in orbit
		vessel = earlySpaceStation
		completeInSequence = true
		
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = 250000
			maxApA = 500000
			targetBody = HomeWorld()
			title = Keep the station in a stable orbit with a perigee greater than 250 km and an apogee less than 500 km
		}
		PARAMETER
		{
			name = Long Duration Habitation Analysis
			type = RP1CollectScience
			title = Conduct Long Duration Habitation Analysis of your astronauts for @/durationText days
			notes = This experiment requires 1000 units of Research Payload every 30d//Placeholder value.
			targetBody = HomeWorld()
			situation = InSpaceLow
			experiment = RP0longDurationHabit1
			fractionComplete = @/experimentCompletion
			completeInSequence = true
		}
	}
}
