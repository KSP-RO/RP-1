CONTRACT_TYPE
{
	name = EarlyComSat
	title = Commercial Communications Satellite (Early)
	group = EarlySatellites


	description = Now that we have tested out the Communications Satellite Technology, there are many uses we have for these Satellites. We have a customer that is requesting a new satellite. Launch a new communications Satellite into the specified orbit.&br;&br;<b><color=red>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b><b><color=white>Removal Condition: Completion of a Commercial Communications Satellite contract</color></b>&br;&br;<b>The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays<br>Number of Contracts Completed: @index / unlimited</b>
	genericDescription = Put a satellite into the requested orbit.

	synopsis = Launch a Communications Satellite for a customer.

	completedMessage = Success! The communications satellite was launched into the proper orbit. Your customer is very happy.

	sortKey = 499

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = 180 * RP1DeadlineMult()  // 6 Months

	targetBody = HomeWorld()


	// ************ REWARDS ************
	prestige = Trivial       // 1.0x
	advanceFunds = (5000 + (@EarlyComSat/HasComSatPayload/minQuantity * 5)) * @RP0:globalHardContractMultiplier * @rewardFactor
	rewardFunds = (8000 + (Pow(@EarlyComSat/Orbit/minApA, 0.5) * 4) + @EarlyComSat/HasComSatPayload/minQuantity * 15) * @RP0:globalHardContractMultiplier * @rewardFactor
	rewardScience = 0
	rewardReputation = 5
	failureReputation = 2
	failureFunds = @advanceFunds * 0.5

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = ComTestSat
		minCount = 2
		title = Complete 'Communications Test Satellite' contract at least @minCount times
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = GEORepeatComSats
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = TundraRepeatComSats
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = MolniyaRepeatComSats
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = MolniyaRepeatComSats
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = TundraRepeatComSats
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = GEORepeatComSats
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = ComTestSat
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = GEOWeather
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = SecondGenWeather
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = SunSyncWeather
		invertRequirement = true
	}

	DATA
	{
		type = int
		index = $EarlyComSat_Count + 0
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			RepeatSat_Completion = ($RepeatSat_Completion + 0) == 0 ? (UniversalTime() - 60 * 86400) : ($RepeatSat_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			EarlyComSat_Count = $EarlyComSat_Count + 1
			RepeatSat_Completion = UniversalTime()
		}
	}

	DATA
	{
		type = int
		antiGrindCompletion = $RepeatSat_Completion == 0 ? (UniversalTime() - @expectedDays * 86400) : $RepeatSat_Completion
	}

	DATA
	{
		type = float
		expectedDays = 60

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 20 - 9, 1), 2) / 3.46
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	DATA
	{
		type = float
		payload = Round(Random(150,500),1)
	}

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = EarlyComSat
		type = VesselParameterGroup
		define = EarlyComSatellite
		dissassociateVesselsOnContractCompletion = true
		title = Communications Satellite (Early)

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
		{
			name = HasComSatPayload
			type = HasResource
			resource = ComSatPayload
			minQuantity = @/payload-0.01
			title = Have a ComSatPayload of at least @/payload units on the craft
			hideChildren = true
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minInclination = Round(Random(30, 50))
			minPeA = Round(Random(700000, 1000000), 1000)
			minApA = Round(Random(3000000, 10000000), 1000)
			maxApA = Round(Random(10000000, 30000000), 1000)
			disableOnStateChange = true
			title = Achieve Orbit within the parameters

			PARAMETER
			{
				name = Duration
				type = Duration

				duration = 2m

				preWaitText = Check for Stable Orbit
				waitingText = Checking for Stable Orbit
				completionText = Stable Orbit: Confirmed
			}
		}
	}

	BEHAVIOUR
	{
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = EarlyComSatellite
	}

	BEHAVIOUR
	{
		name = VesselDestroyed
		type = DialogBox
		DIALOG_BOX
		{
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5
			TEXT
			{
				text = The contract has been completed successfully and the satellite has been transferred back to the customer.
			}
		}
	}
}
