CONTRACT_GROUP
{
    name = RP0
    minVersion = 1.22.2
    displayName = RP-0
	
	// ******** Disable other contracts
	// Stock
	disabledContractType = ARMContract
	disabledContractType = BaseContract
	disabledContractType = CollectScience
	disabledContractType = ExploreBody
	disabledContractType = ExplorationContract
	disabledContractType = GrandTour
	disabledContractType = ISRUContract
	disabledContractType = RecordTrackContract
	disabledContractType = PartTest
	disabledContractType = PlantFlag
	disabledContractType = RecoverAsset
	disabledContractType = SatelliteContract
	disabledContractType = StationContract
	disabledContractType = SurveyContract
	disabledContractType = TourismContract
	disabledContractType = WorldFirstContract
	
	// Asteroid Day / Sentinel
	disabledContractType = SentinelContract
	
	// DMagic Science
	disabledContractType = DMAnomalyContract
	disabledContractType = DMAsteroidSurveyContract
	disabledContractType = DMMagneticSurveyContract
	disabledContractType = DMSurveyContract
	disabledContractType = DMReconContract
	
	// RemoteTech
	disabledContractType = RemoteTech
	
	// WildBlue Tools
	disabledContractType = WBIResearchContract
	
	// SCANsat
	disabledContractType = ScanSatOfficial

	// Kerbalism
	disabledContractType = CrossBelt
	disabledContractType = CrossHeliopause
	disabledContractType = MannedOrbit
	disabledContractType = SpaceAnalysis
	disabledContractType = SpaceHarvest
	
	// Breaking Ground
	disabledContractType = DeployedScienceContract
	disabledContractType = ROCScienceArmContract
	disabledContractType = ROCScienceRetrievalContract
	
	// ********** Contract groups in RP-0
    CONTRACT_GROUP
    {
        name = Milestones
        displayName = Milestones
        agent = Federation Aeronautique Internationale
        minVersion = 1.22.2
		sortKey = 10
    }
    CONTRACT_GROUP
    {
        name = SoundingRockets
        displayName = Sounding Rocket Contracts
        minVersion = 1.22.2
		sortKey = 20
		agent = Exploration
    }
	CONTRACT_GROUP
    {
        name = EarlySatellites
        displayName = Early Satellite Contracts
        minVersion = 1.22.2
		sortKey = 40
		agent = Satellites
    }
	CONTRACT_GROUP
    {
        name = ComSats
        displayName = Communication Satellite Contracts
        minVersion = 1.22.2
		sortKey = 53
		agent = Satellites
    }
	CONTRACT_GROUP
    {
        name = NavSats
        displayName = Navigational Satellite Contracts
        minVersion = 1.22.2
		sortKey = 54
		agent = Satellites
    }
	CONTRACT_GROUP
    {
        name = WeatherSats
        displayName = Weather Satellite Contracts
        minVersion = 1.22.2
		sortKey = 55
		agent = Satellites
    }
	CONTRACT_GROUP
    {
        name = HumanMilestones
        displayName = Human Milestones
        minVersion = 1.22.2
		sortKey = 60
		agent = Federation Aeronautique Internationale
    }
	CONTRACT_GROUP
    {
        name = HumanContracts
        displayName = Human Contracts
        minVersion = 1.22.2
		sortKey = 65
		agent = Federation Aeronautique Internationale
    }
	CONTRACT_GROUP
    {
        name = MoonExploration
        displayName = Lunar Exploration Contracts
        minVersion = 1.22.2
		sortKey = 70
		agent = Exploration
    }
	CONTRACT_GROUP
    {
        name = Flybys
        displayName = Fly-By Contracts
        agent = Exploration
        minVersion = 1.22.2
		sortKey = 80
    }
	CONTRACT_GROUP
    {
        name = AdvSatellites
        displayName = Advanced Satellite Contracts
        minVersion = 1.22.2
		sortKey = 90
		agent = Satellites
    }
	CONTRACT_GROUP
    {
        name = Orbits
        displayName = Uncrewed Orbit Contracts
        minVersion = 1.22.2
		sortKey = 100
		agent = Exploration
    }
	CONTRACT_GROUP
    {
        name = AtmoProbes
        displayName = Atmospheric Probe Contracts
        minVersion = 1.22.2
		sortKey = 110
		agent = Exploration
    }
	CONTRACT_GROUP
    {
        name = Landings
        displayName = Uncrewed Landing Contracts
        minVersion = 1.22.2
		sortKey = 120
		agent = Surveys
    }
	CONTRACT_GROUP
    {
        name = Rovers
        displayName = Rover Contracts
        minVersion = 1.22.2
		sortKey = 130
		agent = Exploration
    }
	CONTRACT_GROUP
    {
        name = SampleReturn
        displayName = Sample Return Contracts
        minVersion = 1.22.2
		sortKey = 140
		agent = Exploration
    }
	CONTRACT_GROUP
    {
        name = SpaceStations
        displayName = Space Station Contracts
        minVersion = 1.22.2
		sortKey = 150
		agent = Stations
    }
	CONTRACT_GROUP
    {
        name = HumanExploration
        displayName = Human Exploration Contracts
        minVersion = 1.22.2
		sortKey = 160
		agent = Flag Planting
    }
	CONTRACT_GROUP
    {
        name = SurfaceBases
        displayName = Surface Base Contracts
        minVersion = 1.22.2
		sortKey = 170
		agent = Base Construction
    }
	CONTRACT_GROUP:NEEDS[ScanSat]
	{
		name			= RP0ScanSat
		displayName		= RP-1 ScanSat Contracts
		agent			= #autoLOC_SCANsat_Agents_Name
		minVersion		= 1.15.0
		maxSimultaneous	= 18
	}	
    CONTRACT_GROUP
    {
        name = Records
        displayName = Records
        agent = Federation Aeronautique Internationale
        minVersion = 1.22.2
		sortKey = 999

		DATA
		{
			type = int
			speedIndex = 0
		}

		DATA
		{
			type = int
			altitudeIndex = 0
		}
    }
    CONTRACT_GROUP
    {
        name = HumanRecords
        displayName = Human Records
        agent = Federation Aeronautique Internationale
        minVersion = 1.22.2
		sortKey = 999
    }
	CONTRACT_GROUP
	{
		name = X-Planes
		displayName = X-Plane Contracts
        minVersion = 1.22.2
		sortKey = 30
		agent = Exploration
	}
	DATA
    {
		title = Contract modifiers
		type = float
		globalHardContractMultiplier = 2.4
    }	
	// SCANsat Data
	DATA
	{
		type = List<CelestialBody>
		requiredValue = false
		
		otherBodies = AllBodies().Where(cb => cb.HasSurface() && cb != HomeWorld() && cb.Parent() != HomeWorld())
		
		reachBodies = ReachedBodies().Where(cb => cb.HasSurface() && cb != HomeWorld() && cb.Parent() != HomeWorld())
		
		orbitBodies = OrbitedBodies().Where(cb => cb.HasSurface() && cb != HomeWorld() && cb.Parent() != HomeWorld())
		
		nextBodies = NextUnreachedBodies(2).Where(cb => (cb.HasSurface() && cb != HomeWorld() && cb.Parent() != HomeWorld()))
		
		avgBodies 		= [ Venus, Mars, Vesta, Ceres, Phobos, Deimos ]
		noLandBodies 	= [ Jupiter, Saturn, Uranus, Neptune ]
		hardBodies 		= [ Mercury, Pluto, Charon ]
		jupiterMoons 	= AllBodies().Where(cb => cb.Parent() == Jupiter)
		saturnMoons		= AllBodies().Where(cb => cb.Parent() == Saturn)
		uranusMoons		= AllBodies().Where(cb => cb.Parent() == Uranus)
		neptuneMoons	= AllBodies().Where(cb => cb.Parent() == Neptune)		
	}
}
